    lex.py: 924:lex: tokens   = ['INTEGER_LITERAL', 'REAL_LITERAL', 'STRING_LITERAL', 'ID', 'LPAREN', 'RPAREN', 'SEMICOLON', 'COMMA', 'AND_BITWISE', 'ASSIGN', 'DIVIDE', 'EQUAL', 'EXPONENTIATION', 'FACTORIAL', 'GREATER', 'GREATER_EQUAL', 'LESS', 'LESS_EQUAL', 'MINUS', 'MODULUS', 'MULTIPLY', 'NOT_BITWISE', 'NOT_EQUAL', 'OR_BITWISE', 'PLUS', 'RANDOM', 'SQUARE_ROOT', 'XOR_BITWISE', 'AND_LOGICAL', 'OR_LOGICAL', 'NOT_LOGICAL', 'EXIT', 'IF', 'THEN', 'ELSE', 'END', 'WHILE', 'DO', 'BREAK', 'CONTINUE', 'READ', 'WRITE', 'INT', 'REAL']
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_ID -> '[_a-zA-Z][_a-zA-Z0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_REAL_LITERAL -> '(\d+[eE][-+]?\d+)|((\d*((\.\d)|(\d\.))\d*)([eE][-+]?\d+)?)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_INTEGER_LITERAL -> '(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|(\d+)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_STRING_LITERAL -> '"[^"
]*"' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_comment -> '@[^
]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQUAL -> '==' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREATER_EQUAL -> '>=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS_EQUAL -> '<=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT_EQUAL -> '<>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EXPONENTIATION -> '\^' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MULTIPLY -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR_BITWISE -> '\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RANDOM -> '\?' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SQUARE_ROOT -> '\$' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_XOR_BITWISE -> '\#' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAREN -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAREN -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND_BITWISE -> '&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASSIGN -> '=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDE -> '/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FACTORIAL -> '!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREATER -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> '-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MODULUS -> '%' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT_BITWISE -> '~' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMMA -> ',' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_ID>[_a-zA-Z][_a-zA-Z0-9]*)|(?P<t_REAL_LITERAL>(\d+[eE][-+]?\d+)|((\d*((\.\d)|(\d\.))\d*)([eE][-+]?\d+)?))|(?P<t_INTEGER_LITERAL>(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|(\d+))|(?P<t_STRING_LITERAL>"[^"
]*")|(?P<t_comment>@[^
]*)|(?P<t_newline>\n+)|(?P<t_EQUAL>==)|(?P<t_GREATER_EQUAL>>=)|(?P<t_LESS_EQUAL><=)|(?P<t_NOT_EQUAL><>)|(?P<t_EXPONENTIATION>\^)|(?P<t_MULTIPLY>\*)|(?P<t_OR_BITWISE>\|)|(?P<t_PLUS>\+)|(?P<t_RANDOM>\?)|(?P<t_SQUARE_ROOT>\$)|(?P<t_XOR_BITWISE>\#)|(?P<t_LPAREN>\()|(?P<t_RPAREN>\))|(?P<t_AND_BITWISE>&)|(?P<t_ASSIGN>=)|(?P<t_DIVIDE>/)|(?P<t_FACTORIAL>!)|(?P<t_GREATER>>)|(?P<t_LESS><)|(?P<t_MINUS>-)|(?P<t_MODULUS>%)|(?P<t_NOT_BITWISE>~)|(?P<t_COMMA>,)|(?P<t_SEMICOLON>;)'
   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : . LexToken(WRITE,'write',6,103)
   yacc.py: 445:Action : Shift and goto state 15
   yacc.py: 410:
   yacc.py: 411:State  : 15
   yacc.py: 435:Stack  : WRITE . LexToken(LPAREN,'(',6,108)
   yacc.py: 445:Action : Shift and goto state 33
   yacc.py: 410:
   yacc.py: 411:State  : 33
   yacc.py: 435:Stack  : WRITE LPAREN . LexToken(ID,'a',6,110)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : WRITE LPAREN ID . LexToken(COMMA,',',6,111)
   yacc.py: 471:Action : Reduce rule [expression -> ID] with ['a'] and goto state 72
   yacc.py: 506:Result : <tuple @ 0x7f819b1f87d0> (('ID', 'a'))
   yacc.py: 410:
   yacc.py: 411:State  : 72
   yacc.py: 435:Stack  : WRITE LPAREN expression . LexToken(COMMA,',',6,111)
   yacc.py: 471:Action : Reduce rule [expression_list_B -> expression] with [('ID', 'a')] and goto state 71
   yacc.py: 506:Result : <list @ 0x7f819b1ae5f0> ([('ID', 'a')])
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B . LexToken(COMMA,',',6,111)
   yacc.py: 445:Action : Shift and goto state 98
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA . LexToken(ID,'a',6,113)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA ID . LexToken(PLUS,'+',6,114)
   yacc.py: 471:Action : Reduce rule [expression -> ID] with ['a'] and goto state 104
   yacc.py: 506:Result : <tuple @ 0x7f819b1f8780> (('ID', 'a'))
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA expression . LexToken(PLUS,'+',6,114)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA expression PLUS . LexToken(ID,'b',6,115)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA expression PLUS ID . LexToken(COMMA,',',6,116)
   yacc.py: 471:Action : Reduce rule [expression -> ID] with ['b'] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f819b1a93c0> (('ID', 'b'))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA expression PLUS expression . LexToken(COMMA,',',6,116)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [('ID', 'a'),'+',('ID', 'b')] and goto state 104
   yacc.py: 506:Result : <tuple @ 0x7f819b2049b0> (('BINOP', '+', ('ID', 'a'), ('ID', 'b')))
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA expression . LexToken(COMMA,',',6,116)
   yacc.py: 471:Action : Reduce rule [expression_list_B -> expression_list_B COMMA expression] with [[('ID', 'a')],',',<tuple @ 0x7f819b2049b0>] and goto state 71
   yacc.py: 506:Result : <list @ 0x7f819b1ae5f0> ([('ID', 'a'), ('BINOP', '+', ('ID', 'a') ...)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B . LexToken(COMMA,',',6,116)
   yacc.py: 445:Action : Shift and goto state 98
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA . LexToken(STRING_LITERAL,'A string',6,118)
   yacc.py: 445:Action : Shift and goto state 28
   yacc.py: 410:
   yacc.py: 411:State  : 28
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA STRING_LITERAL . LexToken(RPAREN,')',6,129)
   yacc.py: 471:Action : Reduce rule [expression -> STRING_LITERAL] with ['A string'] and goto state 104
   yacc.py: 506:Result : <tuple @ 0x7f819b19e280> (('LITERAL', 'STRING', 'A string'))
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B COMMA expression . LexToken(RPAREN,')',6,129)
   yacc.py: 471:Action : Reduce rule [expression_list_B -> expression_list_B COMMA expression] with [<list @ 0x7f819b1ae5f0>,',',<tuple @ 0x7f819b19e280>] and goto state 71
   yacc.py: 506:Result : <list @ 0x7f819b1ae5f0> ([('ID', 'a'), ('BINOP', '+', ('ID', 'a') ...)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : WRITE LPAREN expression_list_B . LexToken(RPAREN,')',6,129)
   yacc.py: 471:Action : Reduce rule [expression_list -> expression_list_B] with [<list @ 0x7f819b1ae5f0>] and goto state 69
   yacc.py: 506:Result : <list @ 0x7f819b1ae5f0> ([('ID', 'a'), ('BINOP', '+', ('ID', 'a') ...)
   yacc.py: 410:
   yacc.py: 411:State  : 69
   yacc.py: 435:Stack  : WRITE LPAREN expression_list . LexToken(RPAREN,')',6,129)
   yacc.py: 445:Action : Shift and goto state 97
   yacc.py: 410:
   yacc.py: 411:State  : 97
   yacc.py: 435:Stack  : WRITE LPAREN expression_list RPAREN . LexToken(SEMICOLON,';',6,130)
   yacc.py: 471:Action : Reduce rule [statement -> WRITE LPAREN expression_list RPAREN] with ['write','(',<list @ 0x7f819b1ae5f0>,')'] and goto state 5
   yacc.py: 506:Result : <tuple @ 0x7f819b1a9640> (('WRITE', [('ID', 'a'), ('BINOP', '+', ( ...)
   yacc.py: 410:
   yacc.py: 411:State  : 5
   yacc.py: 435:Stack  : statement . LexToken(SEMICOLON,';',6,130)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement] with [<tuple @ 0x7f819b1a9640>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f819b1ae820> ([('WRITE', [('ID', 'a'), ('BINOP', '+',  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',6,130)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(WRITE,'write',8,133)
   yacc.py: 445:Action : Shift and goto state 15
   yacc.py: 410:
   yacc.py: 411:State  : 15
   yacc.py: 435:Stack  : statement_list_C SEMICOLON WRITE . LexToken(LPAREN,'(',8,138)
   yacc.py: 445:Action : Shift and goto state 33
   yacc.py: 410:
   yacc.py: 411:State  : 33
   yacc.py: 435:Stack  : statement_list_C SEMICOLON WRITE LPAREN . LexToken(RPAREN,')',8,139)
   yacc.py: 474:Action : Reduce rule [epsilon -> <empty>] with [] and goto state 70
   yacc.py: 548:Result : <NoneType @ 0x55a66a5a1f70> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 70
   yacc.py: 430:Defaulted state 70: Reduce using 46
   yacc.py: 435:Stack  : statement_list_C SEMICOLON WRITE LPAREN epsilon . LexToken(RPAREN,')',8,139)
   yacc.py: 471:Action : Reduce rule [expression_list -> epsilon] with [None] and goto state 69
   yacc.py: 506:Result : <list @ 0x7f819b1ae320> ([])
   yacc.py: 410:
   yacc.py: 411:State  : 69
   yacc.py: 435:Stack  : statement_list_C SEMICOLON WRITE LPAREN expression_list . LexToken(RPAREN,')',8,139)
   yacc.py: 445:Action : Shift and goto state 97
   yacc.py: 410:
   yacc.py: 411:State  : 97
   yacc.py: 435:Stack  : statement_list_C SEMICOLON WRITE LPAREN expression_list RPAREN . $end
   yacc.py: 471:Action : Reduce rule [statement -> WRITE LPAREN expression_list RPAREN] with ['write','(',[],')'] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f819b1a98c0> (('WRITE', []))
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . $end
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f819b1ae820>,';',('WRITE', [])] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f819b1ae820> ([('WRITE', [('ID', 'a'), ('BINOP', '+',  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . $end
   yacc.py: 471:Action : Reduce rule [statement_list -> statement_list_C] with [<list @ 0x7f819b1ae820>] and goto state 2
   yacc.py: 506:Result : <list @ 0x7f819b1ae820> ([('WRITE', [('ID', 'a'), ('BINOP', '+',  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 430:Defaulted state 2: Reduce using 1
   yacc.py: 435:Stack  : statement_list . $end
   yacc.py: 471:Action : Reduce rule [program -> statement_list] with [<list @ 0x7f819b1ae820>] and goto state 1
   yacc.py: 506:Result : <tuple @ 0x7f819b1a9b40> (('BLOCK', [('WRITE', [('ID', 'a'), ('BIN ...)
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : program . $end
   yacc.py: 571:Done   : Returning <tuple @ 0x7f819b1a9b40> (('BLOCK', [('WRITE', [('ID', 'a'), ('BIN ...)
   yacc.py: 572:PLY: PARSE DEBUG END
