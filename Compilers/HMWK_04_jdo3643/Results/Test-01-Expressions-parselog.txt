    lex.py: 924:lex: tokens   = ['INTEGER_LITERAL', 'REAL_LITERAL', 'STRING_LITERAL', 'ID', 'LPAREN', 'RPAREN', 'SEMICOLON', 'COMMA', 'AND_BITWISE', 'ASSIGN', 'DIVIDE', 'EQUAL', 'EXPONENTIATION', 'FACTORIAL', 'GREATER', 'GREATER_EQUAL', 'LESS', 'LESS_EQUAL', 'MINUS', 'MODULUS', 'MULTIPLY', 'NOT_BITWISE', 'NOT_EQUAL', 'OR_BITWISE', 'PLUS', 'RANDOM', 'SQUARE_ROOT', 'XOR_BITWISE', 'AND_LOGICAL', 'OR_LOGICAL', 'NOT_LOGICAL', 'EXIT', 'IF', 'THEN', 'ELSE', 'END', 'WHILE', 'DO', 'BREAK', 'CONTINUE', 'READ', 'WRITE', 'INT', 'REAL']
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_ID -> '[_a-zA-Z][_a-zA-Z0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_REAL_LITERAL -> '(\d+[eE][-+]?\d+)|((\d*((\.\d)|(\d\.))\d*)([eE][-+]?\d+)?)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_INTEGER_LITERAL -> '(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|(\d+)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_STRING_LITERAL -> '"[^"
]*"' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_comment -> '@[^
]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQUAL -> '==' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREATER_EQUAL -> '>=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS_EQUAL -> '<=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT_EQUAL -> '<>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EXPONENTIATION -> '\^' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MULTIPLY -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR_BITWISE -> '\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RANDOM -> '\?' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SQUARE_ROOT -> '\$' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_XOR_BITWISE -> '\#' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAREN -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAREN -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND_BITWISE -> '&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASSIGN -> '=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDE -> '/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FACTORIAL -> '!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREATER -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> '-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MODULUS -> '%' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT_BITWISE -> '~' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMMA -> ',' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_ID>[_a-zA-Z][_a-zA-Z0-9]*)|(?P<t_REAL_LITERAL>(\d+[eE][-+]?\d+)|((\d*((\.\d)|(\d\.))\d*)([eE][-+]?\d+)?))|(?P<t_INTEGER_LITERAL>(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|(\d+))|(?P<t_STRING_LITERAL>"[^"
]*")|(?P<t_comment>@[^
]*)|(?P<t_newline>\n+)|(?P<t_EQUAL>==)|(?P<t_GREATER_EQUAL>>=)|(?P<t_LESS_EQUAL><=)|(?P<t_NOT_EQUAL><>)|(?P<t_EXPONENTIATION>\^)|(?P<t_MULTIPLY>\*)|(?P<t_OR_BITWISE>\|)|(?P<t_PLUS>\+)|(?P<t_RANDOM>\?)|(?P<t_SQUARE_ROOT>\$)|(?P<t_XOR_BITWISE>\#)|(?P<t_LPAREN>\()|(?P<t_RPAREN>\))|(?P<t_AND_BITWISE>&)|(?P<t_ASSIGN>=)|(?P<t_DIVIDE>/)|(?P<t_FACTORIAL>!)|(?P<t_GREATER>>)|(?P<t_LESS><)|(?P<t_MINUS>-)|(?P<t_MODULUS>%)|(?P<t_NOT_BITWISE>~)|(?P<t_COMMA>,)|(?P<t_SEMICOLON>;)'
   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : . LexToken(ID,'a',7,128)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : ID . LexToken(ASSIGN,'=',7,130)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : ID ASSIGN . LexToken(INTEGER_LITERAL,0,7,132)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : ID ASSIGN INTEGER_LITERAL . LexToken(AND_BITWISE,'&',7,134)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [0] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d970c280> (('LITERAL', 'INT', 0))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : ID ASSIGN expression . LexToken(AND_BITWISE,'&',7,134)
   yacc.py: 445:Action : Shift and goto state 40
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 435:Stack  : ID ASSIGN expression AND_BITWISE . LexToken(INTEGER_LITERAL,1,7,136)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : ID ASSIGN expression AND_BITWISE INTEGER_LITERAL . LexToken(OR_BITWISE,'|',7,138)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 74
   yacc.py: 506:Result : <tuple @ 0x7f84d9b815f0> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 435:Stack  : ID ASSIGN expression AND_BITWISE expression . LexToken(OR_BITWISE,'|',7,138)
   yacc.py: 471:Action : Reduce rule [expression -> expression AND_BITWISE expression] with [<tuple @ 0x7f84d970c280>,'&',<tuple @ 0x7f84d9b815f0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9772a10> (('BINOP', '&', ('LITERAL', 'INT', 0), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : ID ASSIGN expression . LexToken(OR_BITWISE,'|',7,138)
   yacc.py: 445:Action : Shift and goto state 53
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE . LexToken(INTEGER_LITERAL,0,7,140)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE INTEGER_LITERAL . LexToken(AND_BITWISE,'&',7,142)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [0] and goto state 87
   yacc.py: 506:Result : <tuple @ 0x7f84d97331e0> (('LITERAL', 'INT', 0))
   yacc.py: 410:
   yacc.py: 411:State  : 87
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE expression . LexToken(AND_BITWISE,'&',7,142)
   yacc.py: 445:Action : Shift and goto state 40
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE expression AND_BITWISE . LexToken(INTEGER_LITERAL,1,7,144)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE expression AND_BITWISE INTEGER_LITERAL . LexToken(SEMICOLON,';',7,145)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 74
   yacc.py: 506:Result : <tuple @ 0x7f84d9b819b0> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE expression AND_BITWISE expression . LexToken(SEMICOLON,';',7,145)
   yacc.py: 471:Action : Reduce rule [expression -> expression AND_BITWISE expression] with [<tuple @ 0x7f84d97331e0>,'&',<tuple @ 0x7f84d9b819b0>] and goto state 87
   yacc.py: 506:Result : <tuple @ 0x7f84d9713230> (('BINOP', '&', ('LITERAL', 'INT', 0), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 87
   yacc.py: 435:Stack  : ID ASSIGN expression OR_BITWISE expression . LexToken(SEMICOLON,';',7,145)
   yacc.py: 471:Action : Reduce rule [expression -> expression OR_BITWISE expression] with [<tuple @ 0x7f84d9772a10>,'|',<tuple @ 0x7f84d9713230>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97aca10> (('BINOP', '|', ('BINOP', '&', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : ID ASSIGN expression . LexToken(SEMICOLON,';',7,145)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['a','=',<tuple @ 0x7f84d97aca10>] and goto state 5
   yacc.py: 506:Result : <tuple @ 0x7f84d9734730> (('ASSIGN', 'a', ('BINOP', '|', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 5
   yacc.py: 435:Stack  : statement . LexToken(SEMICOLON,';',7,145)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement] with [<tuple @ 0x7f84d9734730>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',7,145)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'b',9,197)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',9,199)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,9,201)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(AND_BITWISE,'&',9,203)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97347d0> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(AND_BITWISE,'&',9,203)
   yacc.py: 445:Action : Shift and goto state 40
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression AND_BITWISE . LexToken(INTEGER_LITERAL,1,9,205)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression AND_BITWISE INTEGER_LITERAL . LexToken(XOR_BITWISE,'#',9,207)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 74
   yacc.py: 506:Result : <tuple @ 0x7f84d97346e0> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression AND_BITWISE expression . LexToken(XOR_BITWISE,'#',9,207)
   yacc.py: 471:Action : Reduce rule [expression -> expression AND_BITWISE expression] with [<tuple @ 0x7f84d97347d0>,'&',<tuple @ 0x7f84d97346e0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97131d0> (('BINOP', '&', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(XOR_BITWISE,'#',9,207)
   yacc.py: 445:Action : Shift and goto state 57
   yacc.py: 410:
   yacc.py: 411:State  : 57
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE . LexToken(INTEGER_LITERAL,1,9,209)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE INTEGER_LITERAL . LexToken(AND_BITWISE,'&',9,211)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 91
   yacc.py: 506:Result : <tuple @ 0x7f84d9734640> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 91
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression . LexToken(AND_BITWISE,'&',9,211)
   yacc.py: 445:Action : Shift and goto state 40
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression AND_BITWISE . LexToken(INTEGER_LITERAL,1,9,213)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression AND_BITWISE INTEGER_LITERAL . LexToken(SEMICOLON,';',9,214)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 74
   yacc.py: 506:Result : <tuple @ 0x7f84d9734870> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression AND_BITWISE expression . LexToken(SEMICOLON,';',9,214)
   yacc.py: 471:Action : Reduce rule [expression -> expression AND_BITWISE expression] with [<tuple @ 0x7f84d9734640>,'&',<tuple @ 0x7f84d9734870>] and goto state 91
   yacc.py: 506:Result : <tuple @ 0x7f84d9767950> (('BINOP', '&', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 91
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression . LexToken(SEMICOLON,';',9,214)
   yacc.py: 471:Action : Reduce rule [expression -> expression XOR_BITWISE expression] with [<tuple @ 0x7f84d97131d0>,'#',<tuple @ 0x7f84d9767950>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97c31d0> (('BINOP', '#', ('BINOP', '&', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',9,214)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['b','=',<tuple @ 0x7f84d97c31d0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9734780> (('ASSIGN', 'b', ('BINOP', '#', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',9,214)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9734780>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',9,214)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'c',11,266)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',11,268)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,11,270)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(XOR_BITWISE,'#',11,272)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9734960> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(XOR_BITWISE,'#',11,272)
   yacc.py: 445:Action : Shift and goto state 57
   yacc.py: 410:
   yacc.py: 411:State  : 57
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE . LexToken(INTEGER_LITERAL,3,11,274)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE INTEGER_LITERAL . LexToken(PLUS,'+',11,276)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 91
   yacc.py: 506:Result : <tuple @ 0x7f84d9734910> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 91
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression . LexToken(PLUS,'+',11,276)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression PLUS . LexToken(INTEGER_LITERAL,5,11,278)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression PLUS INTEGER_LITERAL . LexToken(XOR_BITWISE,'#',11,280)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [5] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9734aa0> (('LITERAL', 'INT', 5))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression PLUS expression . LexToken(XOR_BITWISE,'#',11,280)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9734910>,'+',<tuple @ 0x7f84d9734aa0>] and goto state 91
   yacc.py: 506:Result : <tuple @ 0x7f84d97729b0> (('BINOP', '+', ('LITERAL', 'INT', 3), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 91
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression . LexToken(XOR_BITWISE,'#',11,280)
   yacc.py: 471:Action : Reduce rule [expression -> expression XOR_BITWISE expression] with [<tuple @ 0x7f84d9734960>,'#',<tuple @ 0x7f84d97729b0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97728f0> (('BINOP', '#', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(XOR_BITWISE,'#',11,280)
   yacc.py: 445:Action : Shift and goto state 57
   yacc.py: 410:
   yacc.py: 411:State  : 57
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE . LexToken(INTEGER_LITERAL,1,11,282)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE INTEGER_LITERAL . LexToken(SEMICOLON,';',11,283)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 91
   yacc.py: 506:Result : <tuple @ 0x7f84d9734a50> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 91
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression XOR_BITWISE expression . LexToken(SEMICOLON,';',11,283)
   yacc.py: 471:Action : Reduce rule [expression -> expression XOR_BITWISE expression] with [<tuple @ 0x7f84d97728f0>,'#',<tuple @ 0x7f84d9734a50>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9772950> (('BINOP', '#', ('BINOP', '#', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',11,283)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['c','=',<tuple @ 0x7f84d9772950>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9734a00> (('ASSIGN', 'c', ('BINOP', '#', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',11,283)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9734a00>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',11,283)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'d',13,337)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',13,339)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,13,341)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(PLUS,'+',13,343)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9734b40> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(PLUS,'+',13,343)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS . LexToken(INTEGER_LITERAL,2,13,345)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS INTEGER_LITERAL . LexToken(MULTIPLY,'*',13,347)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d97349b0> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(MULTIPLY,'*',13,347)
   yacc.py: 445:Action : Shift and goto state 51
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression MULTIPLY . LexToken(INTEGER_LITERAL,3,13,349)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression MULTIPLY INTEGER_LITERAL . LexToken(PLUS,'+',13,351)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 85
   yacc.py: 506:Result : <tuple @ 0x7f84d9734b90> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression MULTIPLY expression . LexToken(PLUS,'+',13,351)
   yacc.py: 471:Action : Reduce rule [expression -> expression MULTIPLY expression] with [<tuple @ 0x7f84d97349b0>,'*',<tuple @ 0x7f84d9734b90>] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9713410> (('BINOP', '*', ('LITERAL', 'INT', 2), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(PLUS,'+',13,351)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9734b40>,'+',<tuple @ 0x7f84d9713410>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713290> (('BINOP', '+', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(PLUS,'+',13,351)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS . LexToken(INTEGER_LITERAL,4,13,353)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS INTEGER_LITERAL . LexToken(SEMICOLON,';',13,354)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [4] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9734af0> (('LITERAL', 'INT', 4))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(SEMICOLON,';',13,354)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9713290>,'+',<tuple @ 0x7f84d9734af0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97132f0> (('BINOP', '+', ('BINOP', '+', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',13,354)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['d','=',<tuple @ 0x7f84d97132f0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9734be0> (('ASSIGN', 'd', ('BINOP', '+', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',13,354)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9734be0>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',13,354)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'f',14,411)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',14,413)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,14,415)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(MINUS,'-',14,417)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9734cd0> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MINUS,'-',14,417)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS . LexToken(INTEGER_LITERAL,2,14,419)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS INTEGER_LITERAL . LexToken(MULTIPLY,'*',14,421)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9734c30> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(MULTIPLY,'*',14,421)
   yacc.py: 445:Action : Shift and goto state 51
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression MULTIPLY . LexToken(INTEGER_LITERAL,3,14,423)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression MULTIPLY INTEGER_LITERAL . LexToken(MINUS,'-',14,425)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 85
   yacc.py: 506:Result : <tuple @ 0x7f84d9734d20> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression MULTIPLY expression . LexToken(MINUS,'-',14,425)
   yacc.py: 471:Action : Reduce rule [expression -> expression MULTIPLY expression] with [<tuple @ 0x7f84d9734c30>,'*',<tuple @ 0x7f84d9734d20>] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9713350> (('BINOP', '*', ('LITERAL', 'INT', 2), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(MINUS,'-',14,425)
   yacc.py: 471:Action : Reduce rule [expression -> expression MINUS expression] with [<tuple @ 0x7f84d9734cd0>,'-',<tuple @ 0x7f84d9713350>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97133b0> (('BINOP', '-', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MINUS,'-',14,425)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS . LexToken(INTEGER_LITERAL,4,14,427)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS INTEGER_LITERAL . LexToken(SEMICOLON,';',14,428)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [4] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9734c80> (('LITERAL', 'INT', 4))
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(SEMICOLON,';',14,428)
   yacc.py: 471:Action : Reduce rule [expression -> expression MINUS expression] with [<tuple @ 0x7f84d97133b0>,'-',<tuple @ 0x7f84d9734c80>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713470> (('BINOP', '-', ('BINOP', '-', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',14,428)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['f','=',<tuple @ 0x7f84d9713470>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9734d70> (('ASSIGN', 'f', ('BINOP', '-', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',14,428)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9734d70>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',14,428)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'g',16,486)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',16,488)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,16,490)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(PLUS,'+',16,492)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9734e60> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(PLUS,'+',16,492)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS . LexToken(INTEGER_LITERAL,4,16,494)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS INTEGER_LITERAL . LexToken(DIVIDE,'/',16,496)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [4] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9734dc0> (('LITERAL', 'INT', 4))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(DIVIDE,'/',16,496)
   yacc.py: 445:Action : Shift and goto state 42
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression DIVIDE . LexToken(INTEGER_LITERAL,2,16,498)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression DIVIDE INTEGER_LITERAL . LexToken(PLUS,'+',16,500)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 76
   yacc.py: 506:Result : <tuple @ 0x7f84d9734eb0> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression DIVIDE expression . LexToken(PLUS,'+',16,500)
   yacc.py: 471:Action : Reduce rule [expression -> expression DIVIDE expression] with [<tuple @ 0x7f84d9734dc0>,'/',<tuple @ 0x7f84d9734eb0>] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d97134d0> (('BINOP', '/', ('LITERAL', 'INT', 4), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(PLUS,'+',16,500)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9734e60>,'+',<tuple @ 0x7f84d97134d0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713530> (('BINOP', '+', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(PLUS,'+',16,500)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS . LexToken(INTEGER_LITERAL,3,16,502)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS INTEGER_LITERAL . LexToken(SEMICOLON,';',16,503)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9734e10> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(SEMICOLON,';',16,503)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9713530>,'+',<tuple @ 0x7f84d9734e10>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713590> (('BINOP', '+', ('BINOP', '+', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',16,503)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['g','=',<tuple @ 0x7f84d9713590>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9734f00> (('ASSIGN', 'g', ('BINOP', '+', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',16,503)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9734f00>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',16,503)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'h',17,559)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',17,561)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,17,563)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(MINUS,'-',17,565)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418050> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MINUS,'-',17,565)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS . LexToken(INTEGER_LITERAL,4,17,567)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS INTEGER_LITERAL . LexToken(DIVIDE,'/',17,569)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [4] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9734f50> (('LITERAL', 'INT', 4))
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(DIVIDE,'/',17,569)
   yacc.py: 445:Action : Shift and goto state 42
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression DIVIDE . LexToken(INTEGER_LITERAL,2,17,571)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression DIVIDE INTEGER_LITERAL . LexToken(MINUS,'-',17,573)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 76
   yacc.py: 506:Result : <tuple @ 0x7f84d94180f0> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression DIVIDE expression . LexToken(MINUS,'-',17,573)
   yacc.py: 471:Action : Reduce rule [expression -> expression DIVIDE expression] with [<tuple @ 0x7f84d9734f50>,'/',<tuple @ 0x7f84d94180f0>] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d97135f0> (('BINOP', '/', ('LITERAL', 'INT', 4), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(MINUS,'-',17,573)
   yacc.py: 471:Action : Reduce rule [expression -> expression MINUS expression] with [<tuple @ 0x7f84d9418050>,'-',<tuple @ 0x7f84d97135f0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713650> (('BINOP', '-', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MINUS,'-',17,573)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS . LexToken(INTEGER_LITERAL,3,17,575)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS INTEGER_LITERAL . LexToken(SEMICOLON,';',17,576)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9418140> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(SEMICOLON,';',17,576)
   yacc.py: 471:Action : Reduce rule [expression -> expression MINUS expression] with [<tuple @ 0x7f84d9713650>,'-',<tuple @ 0x7f84d9418140>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97136b0> (('BINOP', '-', ('BINOP', '-', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',17,576)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['h','=',<tuple @ 0x7f84d97136b0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d94181e0> (('ASSIGN', 'h', ('BINOP', '-', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',17,576)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d94181e0>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',17,576)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'i',19,635)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',19,637)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,1,19,639)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(PLUS,'+',19,641)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [1] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418230> (('LITERAL', 'INT', 1))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(PLUS,'+',19,641)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS . LexToken(INTEGER_LITERAL,5,19,643)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS INTEGER_LITERAL . LexToken(MODULUS,'%',19,645)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [5] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d94180a0> (('LITERAL', 'INT', 5))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(MODULUS,'%',19,645)
   yacc.py: 445:Action : Shift and goto state 50
   yacc.py: 410:
   yacc.py: 411:State  : 50
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression MODULUS . LexToken(INTEGER_LITERAL,3,19,647)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression MODULUS INTEGER_LITERAL . LexToken(PLUS,'+',19,649)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 84
   yacc.py: 506:Result : <tuple @ 0x7f84d9418280> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression MODULUS expression . LexToken(PLUS,'+',19,649)
   yacc.py: 471:Action : Reduce rule [expression -> expression MODULUS expression] with [<tuple @ 0x7f84d94180a0>,'%',<tuple @ 0x7f84d9418280>] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9713710> (('BINOP', '%', ('LITERAL', 'INT', 5), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(PLUS,'+',19,649)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9418230>,'+',<tuple @ 0x7f84d9713710>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713770> (('BINOP', '+', ('LITERAL', 'INT', 1), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(PLUS,'+',19,649)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS . LexToken(INTEGER_LITERAL,2,19,651)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS INTEGER_LITERAL . LexToken(SEMICOLON,';',19,652)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 89
   yacc.py: 506:Result : <tuple @ 0x7f84d9418320> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression PLUS expression . LexToken(SEMICOLON,';',19,652)
   yacc.py: 471:Action : Reduce rule [expression -> expression PLUS expression] with [<tuple @ 0x7f84d9713770>,'+',<tuple @ 0x7f84d9418320>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97137d0> (('BINOP', '+', ('BINOP', '+', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',19,652)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['i','=',<tuple @ 0x7f84d97137d0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418370> (('ASSIGN', 'i', ('BINOP', '+', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',19,652)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418370>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',19,652)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'j',20,709)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',20,711)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,8,20,713)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(MINUS,'-',20,715)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [8] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d94183c0> (('LITERAL', 'INT', 8))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MINUS,'-',20,715)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS . LexToken(INTEGER_LITERAL,5,20,717)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS INTEGER_LITERAL . LexToken(MODULUS,'%',20,719)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [5] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9418190> (('LITERAL', 'INT', 5))
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(MODULUS,'%',20,719)
   yacc.py: 445:Action : Shift and goto state 50
   yacc.py: 410:
   yacc.py: 411:State  : 50
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression MODULUS . LexToken(INTEGER_LITERAL,4,20,721)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression MODULUS INTEGER_LITERAL . LexToken(MINUS,'-',20,723)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [4] and goto state 84
   yacc.py: 506:Result : <tuple @ 0x7f84d9418410> (('LITERAL', 'INT', 4))
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression MODULUS expression . LexToken(MINUS,'-',20,723)
   yacc.py: 471:Action : Reduce rule [expression -> expression MODULUS expression] with [<tuple @ 0x7f84d9418190>,'%',<tuple @ 0x7f84d9418410>] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d9713830> (('BINOP', '%', ('LITERAL', 'INT', 5), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(MINUS,'-',20,723)
   yacc.py: 471:Action : Reduce rule [expression -> expression MINUS expression] with [<tuple @ 0x7f84d94183c0>,'-',<tuple @ 0x7f84d9713830>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713890> (('BINOP', '-', ('LITERAL', 'INT', 8), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MINUS,'-',20,723)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS . LexToken(INTEGER_LITERAL,2,20,725)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS INTEGER_LITERAL . LexToken(SEMICOLON,';',20,726)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 83
   yacc.py: 506:Result : <tuple @ 0x7f84d94184b0> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MINUS expression . LexToken(SEMICOLON,';',20,726)
   yacc.py: 471:Action : Reduce rule [expression -> expression MINUS expression] with [<tuple @ 0x7f84d9713890>,'-',<tuple @ 0x7f84d94184b0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97138f0> (('BINOP', '-', ('BINOP', '-', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',20,726)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['j','=',<tuple @ 0x7f84d97138f0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418500> (('ASSIGN', 'j', ('BINOP', '-', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',20,726)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418500>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',20,726)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'k',22,785)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',22,787)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,2,22,789)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(MULTIPLY,'*',22,791)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418550> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MULTIPLY,'*',22,791)
   yacc.py: 445:Action : Shift and goto state 51
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY . LexToken(INTEGER_LITERAL,3,22,793)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY INTEGER_LITERAL . LexToken(EXPONENTIATION,'^',22,795)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 85
   yacc.py: 506:Result : <tuple @ 0x7f84d94182d0> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY expression . LexToken(EXPONENTIATION,'^',22,795)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY expression EXPONENTIATION . LexToken(INTEGER_LITERAL,4,22,797)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY expression EXPONENTIATION INTEGER_LITERAL . LexToken(MULTIPLY,'*',22,799)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [4] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d94185a0> (('LITERAL', 'INT', 4))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY expression EXPONENTIATION expression . LexToken(MULTIPLY,'*',22,799)
   yacc.py: 471:Action : Reduce rule [expression -> expression EXPONENTIATION expression] with [<tuple @ 0x7f84d94182d0>,'^',<tuple @ 0x7f84d94185a0>] and goto state 85
   yacc.py: 506:Result : <tuple @ 0x7f84d9713950> (('BINOP', '^', ('LITERAL', 'INT', 3), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY expression . LexToken(MULTIPLY,'*',22,799)
   yacc.py: 471:Action : Reduce rule [expression -> expression MULTIPLY expression] with [<tuple @ 0x7f84d9418550>,'*',<tuple @ 0x7f84d9713950>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d97139b0> (('BINOP', '*', ('LITERAL', 'INT', 2), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MULTIPLY,'*',22,799)
   yacc.py: 445:Action : Shift and goto state 51
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY . LexToken(INTEGER_LITERAL,5,22,801)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY INTEGER_LITERAL . LexToken(SEMICOLON,';',22,802)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [5] and goto state 85
   yacc.py: 506:Result : <tuple @ 0x7f84d9418640> (('LITERAL', 'INT', 5))
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MULTIPLY expression . LexToken(SEMICOLON,';',22,802)
   yacc.py: 471:Action : Reduce rule [expression -> expression MULTIPLY expression] with [<tuple @ 0x7f84d97139b0>,'*',<tuple @ 0x7f84d9418640>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9713a10> (('BINOP', '*', ('BINOP', '*', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',22,802)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['k','=',<tuple @ 0x7f84d9713a10>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418690> (('ASSIGN', 'k', ('BINOP', '*', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',22,802)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418690>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',22,802)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'l',23,884)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',23,886)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,128,23,888)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(DIVIDE,'/',23,892)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [128] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d94186e0> (('LITERAL', 'INT', 128))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(DIVIDE,'/',23,892)
   yacc.py: 445:Action : Shift and goto state 42
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE . LexToken(INTEGER_LITERAL,2,23,894)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE INTEGER_LITERAL . LexToken(EXPONENTIATION,'^',23,896)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 76
   yacc.py: 506:Result : <tuple @ 0x7f84d9418460> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE expression . LexToken(EXPONENTIATION,'^',23,896)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE expression EXPONENTIATION . LexToken(INTEGER_LITERAL,6,23,898)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE expression EXPONENTIATION INTEGER_LITERAL . LexToken(DIVIDE,'/',23,900)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [6] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d9734fa0> (('LITERAL', 'INT', 6))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE expression EXPONENTIATION expression . LexToken(DIVIDE,'/',23,900)
   yacc.py: 471:Action : Reduce rule [expression -> expression EXPONENTIATION expression] with [<tuple @ 0x7f84d9418460>,'^',<tuple @ 0x7f84d9734fa0>] and goto state 76
   yacc.py: 506:Result : <tuple @ 0x7f84d9410cb0> (('BINOP', '^', ('LITERAL', 'INT', 2), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE expression . LexToken(DIVIDE,'/',23,900)
   yacc.py: 471:Action : Reduce rule [expression -> expression DIVIDE expression] with [<tuple @ 0x7f84d94186e0>,'/',<tuple @ 0x7f84d9410cb0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9410d70> (('BINOP', '/', ('LITERAL', 'INT', 128),  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(DIVIDE,'/',23,900)
   yacc.py: 445:Action : Shift and goto state 42
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE . LexToken(INTEGER_LITERAL,2,23,902)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE INTEGER_LITERAL . LexToken(SEMICOLON,';',23,903)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 76
   yacc.py: 506:Result : <tuple @ 0x7f84d94185f0> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression DIVIDE expression . LexToken(SEMICOLON,';',23,903)
   yacc.py: 471:Action : Reduce rule [expression -> expression DIVIDE expression] with [<tuple @ 0x7f84d9410d70>,'/',<tuple @ 0x7f84d94185f0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9410d10> (('BINOP', '/', ('BINOP', '/', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',23,903)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['l','=',<tuple @ 0x7f84d9410d10>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418780> (('ASSIGN', 'l', ('BINOP', '/', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',23,903)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418780>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',23,903)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'m',24,974)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',24,976)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,5,24,978)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(MODULUS,'%',24,980)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [5] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418820> (('LITERAL', 'INT', 5))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MODULUS,'%',24,980)
   yacc.py: 445:Action : Shift and goto state 50
   yacc.py: 410:
   yacc.py: 411:State  : 50
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS . LexToken(INTEGER_LITERAL,3,24,982)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS INTEGER_LITERAL . LexToken(EXPONENTIATION,'^',24,984)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 84
   yacc.py: 506:Result : <tuple @ 0x7f84d9418730> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS expression . LexToken(EXPONENTIATION,'^',24,984)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS expression EXPONENTIATION . LexToken(INTEGER_LITERAL,6,24,986)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS expression EXPONENTIATION INTEGER_LITERAL . LexToken(MODULUS,'%',24,988)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [6] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d9418870> (('LITERAL', 'INT', 6))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS expression EXPONENTIATION expression . LexToken(MODULUS,'%',24,988)
   yacc.py: 471:Action : Reduce rule [expression -> expression EXPONENTIATION expression] with [<tuple @ 0x7f84d9418730>,'^',<tuple @ 0x7f84d9418870>] and goto state 84
   yacc.py: 506:Result : <tuple @ 0x7f84d9410dd0> (('BINOP', '^', ('LITERAL', 'INT', 3), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS expression . LexToken(MODULUS,'%',24,988)
   yacc.py: 471:Action : Reduce rule [expression -> expression MODULUS expression] with [<tuple @ 0x7f84d9418820>,'%',<tuple @ 0x7f84d9410dd0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9410e90> (('BINOP', '%', ('LITERAL', 'INT', 5), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(MODULUS,'%',24,988)
   yacc.py: 445:Action : Shift and goto state 50
   yacc.py: 410:
   yacc.py: 411:State  : 50
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS . LexToken(INTEGER_LITERAL,2,24,990)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS INTEGER_LITERAL . LexToken(SEMICOLON,';',24,991)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 84
   yacc.py: 506:Result : <tuple @ 0x7f84d9418910> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression MODULUS expression . LexToken(SEMICOLON,';',24,991)
   yacc.py: 471:Action : Reduce rule [expression -> expression MODULUS expression] with [<tuple @ 0x7f84d9410e90>,'%',<tuple @ 0x7f84d9418910>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9410e30> (('BINOP', '%', ('BINOP', '%', ('LITERAL' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',24,991)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['m','=',<tuple @ 0x7f84d9410e30>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d94187d0> (('ASSIGN', 'm', ('BINOP', '%', ('BINOP', ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',24,991)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d94187d0>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',24,991)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'n',26,1059)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',26,1061)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,2,26,1063)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(EXPONENTIATION,'^',26,1065)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d94189b0> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(EXPONENTIATION,'^',26,1065)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION . LexToken(INTEGER_LITERAL,3,26,1067)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION INTEGER_LITERAL . LexToken(FACTORIAL,'!',26,1068)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d94188c0> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION expression . LexToken(FACTORIAL,'!',26,1068)
   yacc.py: 445:Action : Shift and goto state 58
   yacc.py: 410:
   yacc.py: 411:State  : 58
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION expression FACTORIAL . LexToken(SEMICOLON,';',26,1069)
   yacc.py: 471:Action : Reduce rule [expression -> expression FACTORIAL] with [<tuple @ 0x7f84d94188c0>,'!'] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d9418a00> (('UNOP', '!', ('LITERAL', 'INT', 3)))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION expression . LexToken(SEMICOLON,';',26,1069)
   yacc.py: 471:Action : Reduce rule [expression -> expression EXPONENTIATION expression] with [<tuple @ 0x7f84d94189b0>,'^',<tuple @ 0x7f84d9418a00>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9410ef0> (('BINOP', '^', ('LITERAL', 'INT', 2), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',26,1069)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['n','=',<tuple @ 0x7f84d9410ef0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418960> (('ASSIGN', 'n', ('BINOP', '^', ('LITERAL ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',26,1069)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418960>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',26,1069)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'o',27,1143)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',27,1145)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(INTEGER_LITERAL,2,27,1147)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN INTEGER_LITERAL . LexToken(EXPONENTIATION,'^',27,1149)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [2] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418b40> (('LITERAL', 'INT', 2))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(EXPONENTIATION,'^',27,1149)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION . LexToken(INTEGER_LITERAL,36,27,1151)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION INTEGER_LITERAL . LexToken(SQUARE_ROOT,'$',27,1153)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [36] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d9418a50> (('LITERAL', 'INT', 36))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION expression . LexToken(SQUARE_ROOT,'$',27,1153)
   yacc.py: 445:Action : Shift and goto state 59
   yacc.py: 410:
   yacc.py: 411:State  : 59
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION expression SQUARE_ROOT . LexToken(SEMICOLON,';',27,1154)
   yacc.py: 471:Action : Reduce rule [expression -> expression SQUARE_ROOT] with [<tuple @ 0x7f84d9418a50>,'$'] and goto state 78
   yacc.py: 506:Result : <tuple @ 0x7f84d9418aa0> (('UNOP', '$', ('LITERAL', 'INT', 36)))
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression EXPONENTIATION expression . LexToken(SEMICOLON,';',27,1154)
   yacc.py: 471:Action : Reduce rule [expression -> expression EXPONENTIATION expression] with [<tuple @ 0x7f84d9418b40>,'^',<tuple @ 0x7f84d9418aa0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9410f50> (('BINOP', '^', ('LITERAL', 'INT', 2), (' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',27,1154)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['o','=',<tuple @ 0x7f84d9410f50>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418be0> (('ASSIGN', 'o', ('BINOP', '^', ('LITERAL ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',27,1154)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418be0>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',27,1154)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'p',29,1232)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',29,1234)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(MINUS,'-',29,1236)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS . LexToken(REAL_LITERAL,1.5,29,1237)
   yacc.py: 445:Action : Shift and goto state 27
   yacc.py: 410:
   yacc.py: 411:State  : 27
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS REAL_LITERAL . LexToken(FACTORIAL,'!',29,1240)
   yacc.py: 471:Action : Reduce rule [expression -> REAL_LITERAL] with [1.5] and goto state 60
   yacc.py: 506:Result : <tuple @ 0x7f84d9418c80> (('LITERAL', 'REAL', 1.5))
   yacc.py: 410:
   yacc.py: 411:State  : 60
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS expression . LexToken(FACTORIAL,'!',29,1240)
   yacc.py: 445:Action : Shift and goto state 58
   yacc.py: 410:
   yacc.py: 411:State  : 58
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS expression FACTORIAL . LexToken(SEMICOLON,';',29,1241)
   yacc.py: 471:Action : Reduce rule [expression -> expression FACTORIAL] with [<tuple @ 0x7f84d9418c80>,'!'] and goto state 60
   yacc.py: 506:Result : <tuple @ 0x7f84d9418af0> (('UNOP', '!', ('LITERAL', 'REAL', 1.5)))
   yacc.py: 410:
   yacc.py: 411:State  : 60
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS expression . LexToken(SEMICOLON,';',29,1241)
   yacc.py: 471:Action : Reduce rule [expression -> MINUS expression] with ['-',<tuple @ 0x7f84d9418af0>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418cd0> (('UNOP', '-', ('UNOP', '!', ('LITERAL',  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',29,1241)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['p','=',<tuple @ 0x7f84d9418cd0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418d20> (('ASSIGN', 'p', ('UNOP', '-', ('UNOP', ' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',29,1241)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418d20>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',29,1241)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'q',30,1327)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',30,1329)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(MINUS,'-',30,1331)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS . LexToken(INTEGER_LITERAL,25,30,1332)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS INTEGER_LITERAL . LexToken(SQUARE_ROOT,'$',30,1334)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [25] and goto state 60
   yacc.py: 506:Result : <tuple @ 0x7f84d9418b90> (('LITERAL', 'INT', 25))
   yacc.py: 410:
   yacc.py: 411:State  : 60
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS expression . LexToken(SQUARE_ROOT,'$',30,1334)
   yacc.py: 445:Action : Shift and goto state 59
   yacc.py: 410:
   yacc.py: 411:State  : 59
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS expression SQUARE_ROOT . LexToken(SEMICOLON,';',30,1335)
   yacc.py: 471:Action : Reduce rule [expression -> expression SQUARE_ROOT] with [<tuple @ 0x7f84d9418b90>,'$'] and goto state 60
   yacc.py: 506:Result : <tuple @ 0x7f84d9418c30> (('UNOP', '$', ('LITERAL', 'INT', 25)))
   yacc.py: 410:
   yacc.py: 411:State  : 60
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN MINUS expression . LexToken(SEMICOLON,';',30,1335)
   yacc.py: 471:Action : Reduce rule [expression -> MINUS expression] with ['-',<tuple @ 0x7f84d9418c30>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418dc0> (('UNOP', '-', ('UNOP', '$', ('LITERAL',  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . LexToken(SEMICOLON,';',30,1335)
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['q','=',<tuple @ 0x7f84d9418dc0>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418e60> (('ASSIGN', 'q', ('UNOP', '-', ('UNOP', ' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . LexToken(SEMICOLON,';',30,1335)
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418e60>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . LexToken(SEMICOLON,';',30,1335)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : statement_list_C SEMICOLON . LexToken(ID,'r',32,1407)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID . LexToken(ASSIGN,'=',32,1409)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN . LexToken(NOT_BITWISE,'~',32,1411)
   yacc.py: 445:Action : Shift and goto state 23
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN NOT_BITWISE . LexToken(INTEGER_LITERAL,3,32,1412)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN NOT_BITWISE INTEGER_LITERAL . LexToken(FACTORIAL,'!',32,1413)
   yacc.py: 471:Action : Reduce rule [expression -> INTEGER_LITERAL] with [3] and goto state 62
   yacc.py: 506:Result : <tuple @ 0x7f84d9418d70> (('LITERAL', 'INT', 3))
   yacc.py: 410:
   yacc.py: 411:State  : 62
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN NOT_BITWISE expression . LexToken(FACTORIAL,'!',32,1413)
   yacc.py: 445:Action : Shift and goto state 58
   yacc.py: 410:
   yacc.py: 411:State  : 58
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN NOT_BITWISE expression FACTORIAL . $end
   yacc.py: 471:Action : Reduce rule [expression -> expression FACTORIAL] with [<tuple @ 0x7f84d9418d70>,'!'] and goto state 62
   yacc.py: 506:Result : <tuple @ 0x7f84d9418e10> (('UNOP', '!', ('LITERAL', 'INT', 3)))
   yacc.py: 410:
   yacc.py: 411:State  : 62
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN NOT_BITWISE expression . $end
   yacc.py: 471:Action : Reduce rule [expression -> NOT_BITWISE expression] with ['~',<tuple @ 0x7f84d9418e10>] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f84d9418f00> (('UNOP', '~', ('UNOP', '!', ('LITERAL',  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : statement_list_C SEMICOLON ID ASSIGN expression . $end
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['r','=',<tuple @ 0x7f84d9418f00>] and goto state 34
   yacc.py: 506:Result : <tuple @ 0x7f84d9418fa0> (('ASSIGN', 'r', ('UNOP', '~', ('UNOP', ' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : statement_list_C SEMICOLON statement . $end
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement_list_C SEMICOLON statement] with [<list @ 0x7f84d971c320>,';',<tuple @ 0x7f84d9418fa0>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . $end
   yacc.py: 471:Action : Reduce rule [statement_list -> statement_list_C] with [<list @ 0x7f84d971c320>] and goto state 2
   yacc.py: 506:Result : <list @ 0x7f84d971c320> ([('ASSIGN', 'a', ('BINOP', '|', ('BINOP' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 430:Defaulted state 2: Reduce using 1
   yacc.py: 435:Stack  : statement_list . $end
   yacc.py: 471:Action : Reduce rule [program -> statement_list] with [<list @ 0x7f84d971c320>] and goto state 1
   yacc.py: 506:Result : <tuple @ 0x7f84d9768780> (('BLOCK', [('ASSIGN', 'a', ('BINOP', '|' ...)
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : program . $end
   yacc.py: 571:Done   : Returning <tuple @ 0x7f84d9768780> (('BLOCK', [('ASSIGN', 'a', ('BINOP', '|' ...)
   yacc.py: 572:PLY: PARSE DEBUG END
