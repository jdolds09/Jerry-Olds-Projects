    lex.py: 924:lex: tokens   = ['INTEGER_LITERAL', 'REAL_LITERAL', 'STRING_LITERAL', 'ID', 'LPAREN', 'RPAREN', 'SEMICOLON', 'COMMA', 'AND_BITWISE', 'ASSIGN', 'DIVIDE', 'EQUAL', 'EXPONENTIATION', 'FACTORIAL', 'GREATER', 'GREATER_EQUAL', 'LESS', 'LESS_EQUAL', 'MINUS', 'MODULUS', 'MULTIPLY', 'NOT_BITWISE', 'NOT_EQUAL', 'OR_BITWISE', 'PLUS', 'RANDOM', 'SQUARE_ROOT', 'XOR_BITWISE', 'AND_LOGICAL', 'OR_LOGICAL', 'NOT_LOGICAL', 'EXIT', 'IF', 'THEN', 'ELSE', 'END', 'WHILE', 'DO', 'BREAK', 'CONTINUE', 'READ', 'WRITE', 'INT', 'REAL']
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_ID -> '[_a-zA-Z][_a-zA-Z0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_REAL_LITERAL -> '(\d+[eE][-+]?\d+)|((\d*((\.\d)|(\d\.))\d*)([eE][-+]?\d+)?)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_INTEGER_LITERAL -> '(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|(\d+)' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_STRING_LITERAL -> '"[^"
]*"' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_comment -> '@[^
]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQUAL -> '==' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREATER_EQUAL -> '>=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS_EQUAL -> '<=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT_EQUAL -> '<>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EXPONENTIATION -> '\^' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MULTIPLY -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR_BITWISE -> '\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RANDOM -> '\?' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SQUARE_ROOT -> '\$' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_XOR_BITWISE -> '\#' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAREN -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAREN -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND_BITWISE -> '&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASSIGN -> '=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDE -> '/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FACTORIAL -> '!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GREATER -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LESS -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> '-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MODULUS -> '%' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT_BITWISE -> '~' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMMA -> ',' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_ID>[_a-zA-Z][_a-zA-Z0-9]*)|(?P<t_REAL_LITERAL>(\d+[eE][-+]?\d+)|((\d*((\.\d)|(\d\.))\d*)([eE][-+]?\d+)?))|(?P<t_INTEGER_LITERAL>(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|(\d+))|(?P<t_STRING_LITERAL>"[^"
]*")|(?P<t_comment>@[^
]*)|(?P<t_newline>\n+)|(?P<t_EQUAL>==)|(?P<t_GREATER_EQUAL>>=)|(?P<t_LESS_EQUAL><=)|(?P<t_NOT_EQUAL><>)|(?P<t_EXPONENTIATION>\^)|(?P<t_MULTIPLY>\*)|(?P<t_OR_BITWISE>\|)|(?P<t_PLUS>\+)|(?P<t_RANDOM>\?)|(?P<t_SQUARE_ROOT>\$)|(?P<t_XOR_BITWISE>\#)|(?P<t_LPAREN>\()|(?P<t_RPAREN>\))|(?P<t_AND_BITWISE>&)|(?P<t_ASSIGN>=)|(?P<t_DIVIDE>/)|(?P<t_FACTORIAL>!)|(?P<t_GREATER>>)|(?P<t_LESS><)|(?P<t_MINUS>-)|(?P<t_MODULUS>%)|(?P<t_NOT_BITWISE>~)|(?P<t_COMMA>,)|(?P<t_SEMICOLON>;)'
   yacc.py:3317:Created by PLY version 3.11 (http://www.dabeaz.com/ply)
   yacc.py:3377:
   yacc.py:3378:Grammar
   yacc.py:3379:
   yacc.py:3381:Rule 0     S' -> program
   yacc.py:3381:Rule 1     program -> statement_list
   yacc.py:3381:Rule 2     statement -> ID ASSIGN expression
   yacc.py:3381:Rule 3     statement -> BREAK
   yacc.py:3381:Rule 4     statement -> CONTINUE
   yacc.py:3381:Rule 5     statement -> INT ID initializer_opt
   yacc.py:3381:Rule 6     statement -> REAL ID initializer_opt
   yacc.py:3381:Rule 7     initializer_opt -> epsilon
   yacc.py:3381:Rule 8     initializer_opt -> ASSIGN expression
   yacc.py:3381:Rule 9     statement -> EXIT
   yacc.py:3381:Rule 10    statement -> EXIT expression
   yacc.py:3381:Rule 11    statement -> IF expression THEN statement_list else_opt END IF
   yacc.py:3381:Rule 12    else_opt -> epsilon
   yacc.py:3381:Rule 13    else_opt -> ELSE statement_list
   yacc.py:3381:Rule 14    statement -> READ LPAREN id_list RPAREN
   yacc.py:3381:Rule 15    statement -> WHILE expression DO statement_list END WHILE
   yacc.py:3381:Rule 16    statement -> WRITE LPAREN expression_list RPAREN
   yacc.py:3381:Rule 17    expression -> expression AND_BITWISE expression
   yacc.py:3381:Rule 18    expression -> expression AND_LOGICAL expression
   yacc.py:3381:Rule 19    expression -> expression DIVIDE expression
   yacc.py:3381:Rule 20    expression -> expression EQUAL expression
   yacc.py:3381:Rule 21    expression -> expression EXPONENTIATION expression
   yacc.py:3381:Rule 22    expression -> expression GREATER expression
   yacc.py:3381:Rule 23    expression -> expression GREATER_EQUAL expression
   yacc.py:3381:Rule 24    expression -> expression LESS expression
   yacc.py:3381:Rule 25    expression -> expression LESS_EQUAL expression
   yacc.py:3381:Rule 26    expression -> expression MINUS expression
   yacc.py:3381:Rule 27    expression -> expression MODULUS expression
   yacc.py:3381:Rule 28    expression -> expression MULTIPLY expression
   yacc.py:3381:Rule 29    expression -> expression NOT_EQUAL expression
   yacc.py:3381:Rule 30    expression -> expression OR_BITWISE expression
   yacc.py:3381:Rule 31    expression -> expression OR_LOGICAL expression
   yacc.py:3381:Rule 32    expression -> expression PLUS expression
   yacc.py:3381:Rule 33    expression -> expression RANDOM expression
   yacc.py:3381:Rule 34    expression -> expression XOR_BITWISE expression
   yacc.py:3381:Rule 35    expression -> MINUS expression
   yacc.py:3381:Rule 36    expression -> PLUS expression
   yacc.py:3381:Rule 37    expression -> NOT_BITWISE expression
   yacc.py:3381:Rule 38    expression -> NOT_LOGICAL expression
   yacc.py:3381:Rule 39    expression -> expression FACTORIAL
   yacc.py:3381:Rule 40    expression -> expression SQUARE_ROOT
   yacc.py:3381:Rule 41    expression -> LPAREN expression RPAREN
   yacc.py:3381:Rule 42    expression -> INTEGER_LITERAL
   yacc.py:3381:Rule 43    expression -> REAL_LITERAL
   yacc.py:3381:Rule 44    expression -> STRING_LITERAL
   yacc.py:3381:Rule 45    expression -> ID
   yacc.py:3381:Rule 46    expression_list -> epsilon
   yacc.py:3381:Rule 47    expression_list -> expression_list_B
   yacc.py:3381:Rule 48    expression_list_B -> expression
   yacc.py:3381:Rule 49    expression_list_B -> expression_list_B COMMA expression
   yacc.py:3381:Rule 50    id_list -> ID
   yacc.py:3381:Rule 51    id_list -> id_list COMMA ID
   yacc.py:3381:Rule 52    statement_list -> epsilon
   yacc.py:3381:Rule 53    statement_list -> statement_list_C
   yacc.py:3381:Rule 54    statement_list_C -> statement
   yacc.py:3381:Rule 55    statement_list_C -> statement_list_C SEMICOLON statement
   yacc.py:3381:Rule 56    epsilon -> <empty>
   yacc.py:3399:
   yacc.py:3400:Terminals, with rules where they appear
   yacc.py:3401:
   yacc.py:3405:AND_BITWISE          : 17
   yacc.py:3405:AND_LOGICAL          : 18
   yacc.py:3405:ASSIGN               : 2 8
   yacc.py:3405:BREAK                : 3
   yacc.py:3405:COMMA                : 49 51
   yacc.py:3405:CONTINUE             : 4
   yacc.py:3405:DIVIDE               : 19
   yacc.py:3405:DO                   : 15
   yacc.py:3405:ELSE                 : 13
   yacc.py:3405:END                  : 11 15
   yacc.py:3405:EQUAL                : 20
   yacc.py:3405:EXIT                 : 9 10
   yacc.py:3405:EXPONENTIATION       : 21
   yacc.py:3405:FACTORIAL            : 39
   yacc.py:3405:GREATER              : 22
   yacc.py:3405:GREATER_EQUAL        : 23
   yacc.py:3405:ID                   : 2 5 6 45 50 51
   yacc.py:3405:IF                   : 11 11
   yacc.py:3405:INT                  : 5
   yacc.py:3405:INTEGER_LITERAL      : 42
   yacc.py:3405:LESS                 : 24
   yacc.py:3405:LESS_EQUAL           : 25
   yacc.py:3405:LPAREN               : 14 16 41
   yacc.py:3405:MINUS                : 26 35
   yacc.py:3405:MODULUS              : 27
   yacc.py:3405:MULTIPLY             : 28
   yacc.py:3405:NOT_BITWISE          : 37
   yacc.py:3405:NOT_EQUAL            : 29
   yacc.py:3405:NOT_LOGICAL          : 38
   yacc.py:3405:OR_BITWISE           : 30
   yacc.py:3405:OR_LOGICAL           : 31
   yacc.py:3405:PLUS                 : 32 36
   yacc.py:3405:RANDOM               : 33
   yacc.py:3405:READ                 : 14
   yacc.py:3405:REAL                 : 6
   yacc.py:3405:REAL_LITERAL         : 43
   yacc.py:3405:RPAREN               : 14 16 41
   yacc.py:3405:SEMICOLON            : 55
   yacc.py:3405:SQUARE_ROOT          : 40
   yacc.py:3405:STRING_LITERAL       : 44
   yacc.py:3405:THEN                 : 11
   yacc.py:3405:WHILE                : 15 15
   yacc.py:3405:WRITE                : 16
   yacc.py:3405:XOR_BITWISE          : 34
   yacc.py:3405:error                : 
   yacc.py:3407:
   yacc.py:3408:Nonterminals, with rules where they appear
   yacc.py:3409:
   yacc.py:3413:else_opt             : 11
   yacc.py:3413:epsilon              : 7 12 46 52
   yacc.py:3413:expression           : 2 8 10 11 15 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 36 37 38 39 40 41 48 49
   yacc.py:3413:expression_list      : 16
   yacc.py:3413:expression_list_B    : 47 49
   yacc.py:3413:id_list              : 14 51
   yacc.py:3413:initializer_opt      : 5 6
   yacc.py:3413:program              : 0
   yacc.py:3413:statement            : 54 55
   yacc.py:3413:statement_list       : 1 11 13 15
   yacc.py:3413:statement_list_C     : 53 55
   yacc.py:3414:
   yacc.py:2543:Parsing method: LALR
   yacc.py:2561:
   yacc.py:2562:state 0
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> . program
   yacc.py:2565:    (1) program -> . statement_list
   yacc.py:2565:    (52) statement_list -> . epsilon
   yacc.py:2565:    (53) statement_list -> . statement_list_C
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2565:    (54) statement_list_C -> . statement
   yacc.py:2565:    (55) statement_list_C -> . statement_list_C SEMICOLON statement
   yacc.py:2565:    (2) statement -> . ID ASSIGN expression
   yacc.py:2565:    (3) statement -> . BREAK
   yacc.py:2565:    (4) statement -> . CONTINUE
   yacc.py:2565:    (5) statement -> . INT ID initializer_opt
   yacc.py:2565:    (6) statement -> . REAL ID initializer_opt
   yacc.py:2565:    (9) statement -> . EXIT
   yacc.py:2565:    (10) statement -> . EXIT expression
   yacc.py:2565:    (11) statement -> . IF expression THEN statement_list else_opt END IF
   yacc.py:2565:    (14) statement -> . READ LPAREN id_list RPAREN
   yacc.py:2565:    (15) statement -> . WHILE expression DO statement_list END WHILE
   yacc.py:2565:    (16) statement -> . WRITE LPAREN expression_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    ID              shift and go to state 6
   yacc.py:2687:    BREAK           shift and go to state 7
   yacc.py:2687:    CONTINUE        shift and go to state 8
   yacc.py:2687:    INT             shift and go to state 9
   yacc.py:2687:    REAL            shift and go to state 10
   yacc.py:2687:    EXIT            shift and go to state 11
   yacc.py:2687:    IF              shift and go to state 12
   yacc.py:2687:    READ            shift and go to state 13
   yacc.py:2687:    WHILE           shift and go to state 14
   yacc.py:2687:    WRITE           shift and go to state 15
   yacc.py:2689:
   yacc.py:2714:    program                        shift and go to state 1
   yacc.py:2714:    statement_list                 shift and go to state 2
   yacc.py:2714:    epsilon                        shift and go to state 3
   yacc.py:2714:    statement_list_C               shift and go to state 4
   yacc.py:2714:    statement                      shift and go to state 5
   yacc.py:2561:
   yacc.py:2562:state 1
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> program .
   yacc.py:2566:
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 2
   yacc.py:2563:
   yacc.py:2565:    (1) program -> statement_list .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 1 (program -> statement_list .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 3
   yacc.py:2563:
   yacc.py:2565:    (52) statement_list -> epsilon .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 52 (statement_list -> epsilon .)
   yacc.py:2687:    ELSE            reduce using rule 52 (statement_list -> epsilon .)
   yacc.py:2687:    END             reduce using rule 52 (statement_list -> epsilon .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 4
   yacc.py:2563:
   yacc.py:2565:    (53) statement_list -> statement_list_C .
   yacc.py:2565:    (55) statement_list_C -> statement_list_C . SEMICOLON statement
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 53 (statement_list -> statement_list_C .)
   yacc.py:2687:    ELSE            reduce using rule 53 (statement_list -> statement_list_C .)
   yacc.py:2687:    END             reduce using rule 53 (statement_list -> statement_list_C .)
   yacc.py:2687:    SEMICOLON       shift and go to state 16
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 5
   yacc.py:2563:
   yacc.py:2565:    (54) statement_list_C -> statement .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 54 (statement_list_C -> statement .)
   yacc.py:2687:    $end            reduce using rule 54 (statement_list_C -> statement .)
   yacc.py:2687:    ELSE            reduce using rule 54 (statement_list_C -> statement .)
   yacc.py:2687:    END             reduce using rule 54 (statement_list_C -> statement .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 6
   yacc.py:2563:
   yacc.py:2565:    (2) statement -> ID . ASSIGN expression
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 17
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 7
   yacc.py:2563:
   yacc.py:2565:    (3) statement -> BREAK .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 3 (statement -> BREAK .)
   yacc.py:2687:    $end            reduce using rule 3 (statement -> BREAK .)
   yacc.py:2687:    ELSE            reduce using rule 3 (statement -> BREAK .)
   yacc.py:2687:    END             reduce using rule 3 (statement -> BREAK .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 8
   yacc.py:2563:
   yacc.py:2565:    (4) statement -> CONTINUE .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 4 (statement -> CONTINUE .)
   yacc.py:2687:    $end            reduce using rule 4 (statement -> CONTINUE .)
   yacc.py:2687:    ELSE            reduce using rule 4 (statement -> CONTINUE .)
   yacc.py:2687:    END             reduce using rule 4 (statement -> CONTINUE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 9
   yacc.py:2563:
   yacc.py:2565:    (5) statement -> INT . ID initializer_opt
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 18
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 10
   yacc.py:2563:
   yacc.py:2565:    (6) statement -> REAL . ID initializer_opt
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 19
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 11
   yacc.py:2563:
   yacc.py:2565:    (9) statement -> EXIT .
   yacc.py:2565:    (10) statement -> EXIT . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 9 (statement -> EXIT .)
   yacc.py:2687:    $end            reduce using rule 9 (statement -> EXIT .)
   yacc.py:2687:    ELSE            reduce using rule 9 (statement -> EXIT .)
   yacc.py:2687:    END             reduce using rule 9 (statement -> EXIT .)
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 20
   yacc.py:2561:
   yacc.py:2562:state 12
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF . expression THEN statement_list else_opt END IF
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 13
   yacc.py:2563:
   yacc.py:2565:    (14) statement -> READ . LPAREN id_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    LPAREN          shift and go to state 31
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 14
   yacc.py:2563:
   yacc.py:2565:    (15) statement -> WHILE . expression DO statement_list END WHILE
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 32
   yacc.py:2561:
   yacc.py:2562:state 15
   yacc.py:2563:
   yacc.py:2565:    (16) statement -> WRITE . LPAREN expression_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    LPAREN          shift and go to state 33
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 16
   yacc.py:2563:
   yacc.py:2565:    (55) statement_list_C -> statement_list_C SEMICOLON . statement
   yacc.py:2565:    (2) statement -> . ID ASSIGN expression
   yacc.py:2565:    (3) statement -> . BREAK
   yacc.py:2565:    (4) statement -> . CONTINUE
   yacc.py:2565:    (5) statement -> . INT ID initializer_opt
   yacc.py:2565:    (6) statement -> . REAL ID initializer_opt
   yacc.py:2565:    (9) statement -> . EXIT
   yacc.py:2565:    (10) statement -> . EXIT expression
   yacc.py:2565:    (11) statement -> . IF expression THEN statement_list else_opt END IF
   yacc.py:2565:    (14) statement -> . READ LPAREN id_list RPAREN
   yacc.py:2565:    (15) statement -> . WHILE expression DO statement_list END WHILE
   yacc.py:2565:    (16) statement -> . WRITE LPAREN expression_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 6
   yacc.py:2687:    BREAK           shift and go to state 7
   yacc.py:2687:    CONTINUE        shift and go to state 8
   yacc.py:2687:    INT             shift and go to state 9
   yacc.py:2687:    REAL            shift and go to state 10
   yacc.py:2687:    EXIT            shift and go to state 11
   yacc.py:2687:    IF              shift and go to state 12
   yacc.py:2687:    READ            shift and go to state 13
   yacc.py:2687:    WHILE           shift and go to state 14
   yacc.py:2687:    WRITE           shift and go to state 15
   yacc.py:2689:
   yacc.py:2714:    statement                      shift and go to state 34
   yacc.py:2561:
   yacc.py:2562:state 17
   yacc.py:2563:
   yacc.py:2565:    (2) statement -> ID ASSIGN . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 35
   yacc.py:2561:
   yacc.py:2562:state 18
   yacc.py:2563:
   yacc.py:2565:    (5) statement -> INT ID . initializer_opt
   yacc.py:2565:    (7) initializer_opt -> . epsilon
   yacc.py:2565:    (8) initializer_opt -> . ASSIGN expression
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 38
   yacc.py:2687:    SEMICOLON       reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    $end            reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    ELSE            reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    END             reduce using rule 56 (epsilon -> .)
   yacc.py:2689:
   yacc.py:2714:    initializer_opt                shift and go to state 36
   yacc.py:2714:    epsilon                        shift and go to state 37
   yacc.py:2561:
   yacc.py:2562:state 19
   yacc.py:2563:
   yacc.py:2565:    (6) statement -> REAL ID . initializer_opt
   yacc.py:2565:    (7) initializer_opt -> . epsilon
   yacc.py:2565:    (8) initializer_opt -> . ASSIGN expression
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 38
   yacc.py:2687:    SEMICOLON       reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    $end            reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    ELSE            reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    END             reduce using rule 56 (epsilon -> .)
   yacc.py:2689:
   yacc.py:2714:    initializer_opt                shift and go to state 39
   yacc.py:2714:    epsilon                        shift and go to state 37
   yacc.py:2561:
   yacc.py:2562:state 20
   yacc.py:2563:
   yacc.py:2565:    (10) statement -> EXIT expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 10 (statement -> EXIT expression .)
   yacc.py:2687:    $end            reduce using rule 10 (statement -> EXIT expression .)
   yacc.py:2687:    ELSE            reduce using rule 10 (statement -> EXIT expression .)
   yacc.py:2687:    END             reduce using rule 10 (statement -> EXIT expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 21
   yacc.py:2563:
   yacc.py:2565:    (35) expression -> MINUS . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 60
   yacc.py:2561:
   yacc.py:2562:state 22
   yacc.py:2563:
   yacc.py:2565:    (36) expression -> PLUS . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 61
   yacc.py:2561:
   yacc.py:2562:state 23
   yacc.py:2563:
   yacc.py:2565:    (37) expression -> NOT_BITWISE . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 62
   yacc.py:2561:
   yacc.py:2562:state 24
   yacc.py:2563:
   yacc.py:2565:    (38) expression -> NOT_LOGICAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 63
   yacc.py:2561:
   yacc.py:2562:state 25
   yacc.py:2563:
   yacc.py:2565:    (41) expression -> LPAREN . expression RPAREN
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 64
   yacc.py:2561:
   yacc.py:2562:state 26
   yacc.py:2563:
   yacc.py:2565:    (42) expression -> INTEGER_LITERAL .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    DIVIDE          reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    EQUAL           reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    GREATER         reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    LESS            reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    MINUS           reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    MODULUS         reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    MULTIPLY        reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    PLUS            reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    RANDOM          reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    FACTORIAL       reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    SEMICOLON       reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    $end            reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    ELSE            reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    END             reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    THEN            reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    DO              reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    RPAREN          reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2687:    COMMA           reduce using rule 42 (expression -> INTEGER_LITERAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 27
   yacc.py:2563:
   yacc.py:2565:    (43) expression -> REAL_LITERAL .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    DIVIDE          reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    EQUAL           reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    GREATER         reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    LESS            reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    MINUS           reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    MODULUS         reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    MULTIPLY        reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    PLUS            reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    RANDOM          reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    FACTORIAL       reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    SEMICOLON       reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    $end            reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    ELSE            reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    END             reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    THEN            reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    DO              reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    RPAREN          reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2687:    COMMA           reduce using rule 43 (expression -> REAL_LITERAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 28
   yacc.py:2563:
   yacc.py:2565:    (44) expression -> STRING_LITERAL .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    DIVIDE          reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    EQUAL           reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    GREATER         reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    LESS            reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    MINUS           reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    MODULUS         reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    MULTIPLY        reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    PLUS            reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    RANDOM          reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    FACTORIAL       reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    SEMICOLON       reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    $end            reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    ELSE            reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    END             reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    THEN            reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    DO              reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    RPAREN          reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2687:    COMMA           reduce using rule 44 (expression -> STRING_LITERAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 29
   yacc.py:2563:
   yacc.py:2565:    (45) expression -> ID .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    DIVIDE          reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    EQUAL           reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    GREATER         reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    LESS            reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    MINUS           reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    MODULUS         reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    MULTIPLY        reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    PLUS            reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    RANDOM          reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    FACTORIAL       reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    SEMICOLON       reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    $end            reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    ELSE            reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    END             reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    THEN            reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    DO              reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    RPAREN          reduce using rule 45 (expression -> ID .)
   yacc.py:2687:    COMMA           reduce using rule 45 (expression -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 30
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF expression . THEN statement_list else_opt END IF
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    THEN            shift and go to state 65
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 31
   yacc.py:2563:
   yacc.py:2565:    (14) statement -> READ LPAREN . id_list RPAREN
   yacc.py:2565:    (50) id_list -> . ID
   yacc.py:2565:    (51) id_list -> . id_list COMMA ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 67
   yacc.py:2689:
   yacc.py:2714:    id_list                        shift and go to state 66
   yacc.py:2561:
   yacc.py:2562:state 32
   yacc.py:2563:
   yacc.py:2565:    (15) statement -> WHILE expression . DO statement_list END WHILE
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    DO              shift and go to state 68
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 33
   yacc.py:2563:
   yacc.py:2565:    (16) statement -> WRITE LPAREN . expression_list RPAREN
   yacc.py:2565:    (46) expression_list -> . epsilon
   yacc.py:2565:    (47) expression_list -> . expression_list_B
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2565:    (48) expression_list_B -> . expression
   yacc.py:2565:    (49) expression_list_B -> . expression_list_B COMMA expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    RPAREN          reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression_list                shift and go to state 69
   yacc.py:2714:    epsilon                        shift and go to state 70
   yacc.py:2714:    expression_list_B              shift and go to state 71
   yacc.py:2714:    expression                     shift and go to state 72
   yacc.py:2561:
   yacc.py:2562:state 34
   yacc.py:2563:
   yacc.py:2565:    (55) statement_list_C -> statement_list_C SEMICOLON statement .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 55 (statement_list_C -> statement_list_C SEMICOLON statement .)
   yacc.py:2687:    $end            reduce using rule 55 (statement_list_C -> statement_list_C SEMICOLON statement .)
   yacc.py:2687:    ELSE            reduce using rule 55 (statement_list_C -> statement_list_C SEMICOLON statement .)
   yacc.py:2687:    END             reduce using rule 55 (statement_list_C -> statement_list_C SEMICOLON statement .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 35
   yacc.py:2563:
   yacc.py:2565:    (2) statement -> ID ASSIGN expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 2 (statement -> ID ASSIGN expression .)
   yacc.py:2687:    $end            reduce using rule 2 (statement -> ID ASSIGN expression .)
   yacc.py:2687:    ELSE            reduce using rule 2 (statement -> ID ASSIGN expression .)
   yacc.py:2687:    END             reduce using rule 2 (statement -> ID ASSIGN expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 36
   yacc.py:2563:
   yacc.py:2565:    (5) statement -> INT ID initializer_opt .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 5 (statement -> INT ID initializer_opt .)
   yacc.py:2687:    $end            reduce using rule 5 (statement -> INT ID initializer_opt .)
   yacc.py:2687:    ELSE            reduce using rule 5 (statement -> INT ID initializer_opt .)
   yacc.py:2687:    END             reduce using rule 5 (statement -> INT ID initializer_opt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 37
   yacc.py:2563:
   yacc.py:2565:    (7) initializer_opt -> epsilon .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 7 (initializer_opt -> epsilon .)
   yacc.py:2687:    $end            reduce using rule 7 (initializer_opt -> epsilon .)
   yacc.py:2687:    ELSE            reduce using rule 7 (initializer_opt -> epsilon .)
   yacc.py:2687:    END             reduce using rule 7 (initializer_opt -> epsilon .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 38
   yacc.py:2563:
   yacc.py:2565:    (8) initializer_opt -> ASSIGN . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 73
   yacc.py:2561:
   yacc.py:2562:state 39
   yacc.py:2563:
   yacc.py:2565:    (6) statement -> REAL ID initializer_opt .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 6 (statement -> REAL ID initializer_opt .)
   yacc.py:2687:    $end            reduce using rule 6 (statement -> REAL ID initializer_opt .)
   yacc.py:2687:    ELSE            reduce using rule 6 (statement -> REAL ID initializer_opt .)
   yacc.py:2687:    END             reduce using rule 6 (statement -> REAL ID initializer_opt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 40
   yacc.py:2563:
   yacc.py:2565:    (17) expression -> expression AND_BITWISE . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 74
   yacc.py:2561:
   yacc.py:2562:state 41
   yacc.py:2563:
   yacc.py:2565:    (18) expression -> expression AND_LOGICAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 75
   yacc.py:2561:
   yacc.py:2562:state 42
   yacc.py:2563:
   yacc.py:2565:    (19) expression -> expression DIVIDE . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 76
   yacc.py:2561:
   yacc.py:2562:state 43
   yacc.py:2563:
   yacc.py:2565:    (20) expression -> expression EQUAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 44
   yacc.py:2563:
   yacc.py:2565:    (21) expression -> expression EXPONENTIATION . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 78
   yacc.py:2561:
   yacc.py:2562:state 45
   yacc.py:2563:
   yacc.py:2565:    (22) expression -> expression GREATER . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 79
   yacc.py:2561:
   yacc.py:2562:state 46
   yacc.py:2563:
   yacc.py:2565:    (23) expression -> expression GREATER_EQUAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 80
   yacc.py:2561:
   yacc.py:2562:state 47
   yacc.py:2563:
   yacc.py:2565:    (24) expression -> expression LESS . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 81
   yacc.py:2561:
   yacc.py:2562:state 48
   yacc.py:2563:
   yacc.py:2565:    (25) expression -> expression LESS_EQUAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 82
   yacc.py:2561:
   yacc.py:2562:state 49
   yacc.py:2563:
   yacc.py:2565:    (26) expression -> expression MINUS . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 83
   yacc.py:2561:
   yacc.py:2562:state 50
   yacc.py:2563:
   yacc.py:2565:    (27) expression -> expression MODULUS . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 84
   yacc.py:2561:
   yacc.py:2562:state 51
   yacc.py:2563:
   yacc.py:2565:    (28) expression -> expression MULTIPLY . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 85
   yacc.py:2561:
   yacc.py:2562:state 52
   yacc.py:2563:
   yacc.py:2565:    (29) expression -> expression NOT_EQUAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 86
   yacc.py:2561:
   yacc.py:2562:state 53
   yacc.py:2563:
   yacc.py:2565:    (30) expression -> expression OR_BITWISE . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 87
   yacc.py:2561:
   yacc.py:2562:state 54
   yacc.py:2563:
   yacc.py:2565:    (31) expression -> expression OR_LOGICAL . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 88
   yacc.py:2561:
   yacc.py:2562:state 55
   yacc.py:2563:
   yacc.py:2565:    (32) expression -> expression PLUS . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 89
   yacc.py:2561:
   yacc.py:2562:state 56
   yacc.py:2563:
   yacc.py:2565:    (33) expression -> expression RANDOM . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 90
   yacc.py:2561:
   yacc.py:2562:state 57
   yacc.py:2563:
   yacc.py:2565:    (34) expression -> expression XOR_BITWISE . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 91
   yacc.py:2561:
   yacc.py:2562:state 58
   yacc.py:2563:
   yacc.py:2565:    (39) expression -> expression FACTORIAL .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    DIVIDE          reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    EQUAL           reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    GREATER         reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    LESS            reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    MINUS           reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    MODULUS         reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    MULTIPLY        reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    PLUS            reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    RANDOM          reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    FACTORIAL       reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    SEMICOLON       reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    $end            reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    ELSE            reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    END             reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    THEN            reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    DO              reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    RPAREN          reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2687:    COMMA           reduce using rule 39 (expression -> expression FACTORIAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 59
   yacc.py:2563:
   yacc.py:2565:    (40) expression -> expression SQUARE_ROOT .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    DIVIDE          reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    EQUAL           reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    GREATER         reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    LESS            reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    MINUS           reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    MODULUS         reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    MULTIPLY        reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    PLUS            reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    RANDOM          reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    FACTORIAL       reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    SEMICOLON       reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    $end            reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    ELSE            reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    END             reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    THEN            reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    DO              reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    RPAREN          reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2687:    COMMA           reduce using rule 40 (expression -> expression SQUARE_ROOT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 60
   yacc.py:2563:
   yacc.py:2565:    (35) expression -> MINUS expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    EQUAL           reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    GREATER         reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    LESS            reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    MINUS           reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    MODULUS         reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    PLUS            reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    RANDOM          reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    $end            reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    ELSE            reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    END             reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    THEN            reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    DO              reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    RPAREN          reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    COMMA           reduce using rule 35 (expression -> MINUS expression .)
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 35 (expression -> MINUS expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 35 (expression -> MINUS expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! EXPONENTIATION  [ shift and go to state 44 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 61
   yacc.py:2563:
   yacc.py:2565:    (36) expression -> PLUS expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    EQUAL           reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    GREATER         reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    LESS            reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    MINUS           reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    MODULUS         reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    PLUS            reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    RANDOM          reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    $end            reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    ELSE            reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    END             reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    THEN            reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    DO              reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    RPAREN          reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    COMMA           reduce using rule 36 (expression -> PLUS expression .)
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 36 (expression -> PLUS expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 36 (expression -> PLUS expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! EXPONENTIATION  [ shift and go to state 44 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 62
   yacc.py:2563:
   yacc.py:2565:    (37) expression -> NOT_BITWISE expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    EQUAL           reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    GREATER         reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    LESS            reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    MINUS           reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    MODULUS         reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    PLUS            reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    RANDOM          reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    $end            reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    ELSE            reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    END             reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    THEN            reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    DO              reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    RPAREN          reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    COMMA           reduce using rule 37 (expression -> NOT_BITWISE expression .)
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 37 (expression -> NOT_BITWISE expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 37 (expression -> NOT_BITWISE expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! EXPONENTIATION  [ shift and go to state 44 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 63
   yacc.py:2563:
   yacc.py:2565:    (38) expression -> NOT_LOGICAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    EQUAL           reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    GREATER         reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    LESS            reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    MINUS           reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    MODULUS         reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    PLUS            reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    RANDOM          reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    $end            reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    END             reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    THEN            reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    DO              reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 38 (expression -> NOT_LOGICAL expression .)
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 38 (expression -> NOT_LOGICAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 38 (expression -> NOT_LOGICAL expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! EXPONENTIATION  [ shift and go to state 44 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 64
   yacc.py:2563:
   yacc.py:2565:    (41) expression -> LPAREN expression . RPAREN
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    RPAREN          shift and go to state 92
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 65
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF expression THEN . statement_list else_opt END IF
   yacc.py:2565:    (52) statement_list -> . epsilon
   yacc.py:2565:    (53) statement_list -> . statement_list_C
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2565:    (54) statement_list_C -> . statement
   yacc.py:2565:    (55) statement_list_C -> . statement_list_C SEMICOLON statement
   yacc.py:2565:    (2) statement -> . ID ASSIGN expression
   yacc.py:2565:    (3) statement -> . BREAK
   yacc.py:2565:    (4) statement -> . CONTINUE
   yacc.py:2565:    (5) statement -> . INT ID initializer_opt
   yacc.py:2565:    (6) statement -> . REAL ID initializer_opt
   yacc.py:2565:    (9) statement -> . EXIT
   yacc.py:2565:    (10) statement -> . EXIT expression
   yacc.py:2565:    (11) statement -> . IF expression THEN statement_list else_opt END IF
   yacc.py:2565:    (14) statement -> . READ LPAREN id_list RPAREN
   yacc.py:2565:    (15) statement -> . WHILE expression DO statement_list END WHILE
   yacc.py:2565:    (16) statement -> . WRITE LPAREN expression_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    ELSE            reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    END             reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    ID              shift and go to state 6
   yacc.py:2687:    BREAK           shift and go to state 7
   yacc.py:2687:    CONTINUE        shift and go to state 8
   yacc.py:2687:    INT             shift and go to state 9
   yacc.py:2687:    REAL            shift and go to state 10
   yacc.py:2687:    EXIT            shift and go to state 11
   yacc.py:2687:    IF              shift and go to state 12
   yacc.py:2687:    READ            shift and go to state 13
   yacc.py:2687:    WHILE           shift and go to state 14
   yacc.py:2687:    WRITE           shift and go to state 15
   yacc.py:2689:
   yacc.py:2714:    statement_list                 shift and go to state 93
   yacc.py:2714:    epsilon                        shift and go to state 3
   yacc.py:2714:    statement_list_C               shift and go to state 4
   yacc.py:2714:    statement                      shift and go to state 5
   yacc.py:2561:
   yacc.py:2562:state 66
   yacc.py:2563:
   yacc.py:2565:    (14) statement -> READ LPAREN id_list . RPAREN
   yacc.py:2565:    (51) id_list -> id_list . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    RPAREN          shift and go to state 94
   yacc.py:2687:    COMMA           shift and go to state 95
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 67
   yacc.py:2563:
   yacc.py:2565:    (50) id_list -> ID .
   yacc.py:2566:
   yacc.py:2687:    RPAREN          reduce using rule 50 (id_list -> ID .)
   yacc.py:2687:    COMMA           reduce using rule 50 (id_list -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 68
   yacc.py:2563:
   yacc.py:2565:    (15) statement -> WHILE expression DO . statement_list END WHILE
   yacc.py:2565:    (52) statement_list -> . epsilon
   yacc.py:2565:    (53) statement_list -> . statement_list_C
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2565:    (54) statement_list_C -> . statement
   yacc.py:2565:    (55) statement_list_C -> . statement_list_C SEMICOLON statement
   yacc.py:2565:    (2) statement -> . ID ASSIGN expression
   yacc.py:2565:    (3) statement -> . BREAK
   yacc.py:2565:    (4) statement -> . CONTINUE
   yacc.py:2565:    (5) statement -> . INT ID initializer_opt
   yacc.py:2565:    (6) statement -> . REAL ID initializer_opt
   yacc.py:2565:    (9) statement -> . EXIT
   yacc.py:2565:    (10) statement -> . EXIT expression
   yacc.py:2565:    (11) statement -> . IF expression THEN statement_list else_opt END IF
   yacc.py:2565:    (14) statement -> . READ LPAREN id_list RPAREN
   yacc.py:2565:    (15) statement -> . WHILE expression DO statement_list END WHILE
   yacc.py:2565:    (16) statement -> . WRITE LPAREN expression_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    ID              shift and go to state 6
   yacc.py:2687:    BREAK           shift and go to state 7
   yacc.py:2687:    CONTINUE        shift and go to state 8
   yacc.py:2687:    INT             shift and go to state 9
   yacc.py:2687:    REAL            shift and go to state 10
   yacc.py:2687:    EXIT            shift and go to state 11
   yacc.py:2687:    IF              shift and go to state 12
   yacc.py:2687:    READ            shift and go to state 13
   yacc.py:2687:    WHILE           shift and go to state 14
   yacc.py:2687:    WRITE           shift and go to state 15
   yacc.py:2689:
   yacc.py:2714:    statement_list                 shift and go to state 96
   yacc.py:2714:    epsilon                        shift and go to state 3
   yacc.py:2714:    statement_list_C               shift and go to state 4
   yacc.py:2714:    statement                      shift and go to state 5
   yacc.py:2561:
   yacc.py:2562:state 69
   yacc.py:2563:
   yacc.py:2565:    (16) statement -> WRITE LPAREN expression_list . RPAREN
   yacc.py:2566:
   yacc.py:2687:    RPAREN          shift and go to state 97
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 70
   yacc.py:2563:
   yacc.py:2565:    (46) expression_list -> epsilon .
   yacc.py:2566:
   yacc.py:2687:    RPAREN          reduce using rule 46 (expression_list -> epsilon .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 71
   yacc.py:2563:
   yacc.py:2565:    (47) expression_list -> expression_list_B .
   yacc.py:2565:    (49) expression_list_B -> expression_list_B . COMMA expression
   yacc.py:2566:
   yacc.py:2687:    RPAREN          reduce using rule 47 (expression_list -> expression_list_B .)
   yacc.py:2687:    COMMA           shift and go to state 98
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 72
   yacc.py:2563:
   yacc.py:2565:    (48) expression_list_B -> expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 48 (expression_list_B -> expression .)
   yacc.py:2687:    RPAREN          reduce using rule 48 (expression_list_B -> expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 73
   yacc.py:2563:
   yacc.py:2565:    (8) initializer_opt -> ASSIGN expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 8 (initializer_opt -> ASSIGN expression .)
   yacc.py:2687:    $end            reduce using rule 8 (initializer_opt -> ASSIGN expression .)
   yacc.py:2687:    ELSE            reduce using rule 8 (initializer_opt -> ASSIGN expression .)
   yacc.py:2687:    END             reduce using rule 8 (initializer_opt -> ASSIGN expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 74
   yacc.py:2563:
   yacc.py:2565:    (17) expression -> expression AND_BITWISE expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    $end            reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    ELSE            reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    END             reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    THEN            reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    DO              reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    RPAREN          reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    COMMA           reduce using rule 17 (expression -> expression AND_BITWISE expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! EQUAL           [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! NOT_EQUAL       [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 17 (expression -> expression AND_BITWISE expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 75
   yacc.py:2563:
   yacc.py:2565:    (18) expression -> expression AND_LOGICAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_LOGICAL     reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    $end            reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    END             reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    THEN            reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    DO              reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 18 (expression -> expression AND_LOGICAL expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! AND_BITWISE     [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! EQUAL           [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! NOT_EQUAL       [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! OR_BITWISE      [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! XOR_BITWISE     [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 18 (expression -> expression AND_LOGICAL expression .) ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 76
   yacc.py:2563:
   yacc.py:2565:    (19) expression -> expression DIVIDE expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    EQUAL           reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    GREATER         reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    LESS            reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    MINUS           reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    MODULUS         reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    PLUS            reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    RANDOM          reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    $end            reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    ELSE            reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    END             reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    THEN            reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    DO              reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    RPAREN          reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    COMMA           reduce using rule 19 (expression -> expression DIVIDE expression .)
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 19 (expression -> expression DIVIDE expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 77
   yacc.py:2563:
   yacc.py:2565:    (20) expression -> expression EQUAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    EQUAL           reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    $end            reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    END             reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    THEN            reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    DO              reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 20 (expression -> expression EQUAL expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 20 (expression -> expression EQUAL expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 78
   yacc.py:2563:
   yacc.py:2565:    (21) expression -> expression EXPONENTIATION expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    EQUAL           reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    GREATER         reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    LESS            reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    MINUS           reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    MODULUS         reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    PLUS            reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    RANDOM          reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    $end            reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    ELSE            reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    END             reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    THEN            reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    DO              reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    RPAREN          reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    COMMA           reduce using rule 21 (expression -> expression EXPONENTIATION expression .)
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 21 (expression -> expression EXPONENTIATION expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 21 (expression -> expression EXPONENTIATION expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 21 (expression -> expression EXPONENTIATION expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 79
   yacc.py:2563:
   yacc.py:2565:    (22) expression -> expression GREATER expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    EQUAL           reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    GREATER         reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    LESS            reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    $end            reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    ELSE            reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    END             reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    THEN            reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    DO              reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    RPAREN          reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    COMMA           reduce using rule 22 (expression -> expression GREATER expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 22 (expression -> expression GREATER expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 80
   yacc.py:2563:
   yacc.py:2565:    (23) expression -> expression GREATER_EQUAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    EQUAL           reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    GREATER         reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    LESS            reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    $end            reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    END             reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    THEN            reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    DO              reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 23 (expression -> expression GREATER_EQUAL expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 23 (expression -> expression GREATER_EQUAL expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 81
   yacc.py:2563:
   yacc.py:2565:    (24) expression -> expression LESS expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    EQUAL           reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    GREATER         reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    LESS            reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    $end            reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    ELSE            reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    END             reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    THEN            reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    DO              reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    RPAREN          reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    COMMA           reduce using rule 24 (expression -> expression LESS expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 24 (expression -> expression LESS expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 82
   yacc.py:2563:
   yacc.py:2565:    (25) expression -> expression LESS_EQUAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    EQUAL           reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    GREATER         reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    LESS            reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    $end            reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    END             reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    THEN            reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    DO              reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 25 (expression -> expression LESS_EQUAL expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 25 (expression -> expression LESS_EQUAL expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 83
   yacc.py:2563:
   yacc.py:2565:    (26) expression -> expression MINUS expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    EQUAL           reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    GREATER         reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    LESS            reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    MINUS           reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    PLUS            reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    RANDOM          reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    $end            reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    ELSE            reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    END             reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    THEN            reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    DO              reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    RPAREN          reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    COMMA           reduce using rule 26 (expression -> expression MINUS expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 26 (expression -> expression MINUS expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 26 (expression -> expression MINUS expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 26 (expression -> expression MINUS expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 26 (expression -> expression MINUS expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 26 (expression -> expression MINUS expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 26 (expression -> expression MINUS expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 84
   yacc.py:2563:
   yacc.py:2565:    (27) expression -> expression MODULUS expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    EQUAL           reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    GREATER         reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    LESS            reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    MINUS           reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    MODULUS         reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    PLUS            reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    RANDOM          reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    $end            reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    ELSE            reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    END             reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    THEN            reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    DO              reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    RPAREN          reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    COMMA           reduce using rule 27 (expression -> expression MODULUS expression .)
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 27 (expression -> expression MODULUS expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 27 (expression -> expression MODULUS expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 27 (expression -> expression MODULUS expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 85
   yacc.py:2563:
   yacc.py:2565:    (28) expression -> expression MULTIPLY expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    DIVIDE          reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    EQUAL           reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    GREATER         reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    LESS            reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    MINUS           reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    MODULUS         reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    MULTIPLY        reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    PLUS            reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    RANDOM          reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    $end            reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    ELSE            reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    END             reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    THEN            reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    DO              reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    RPAREN          reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    COMMA           reduce using rule 28 (expression -> expression MULTIPLY expression .)
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 28 (expression -> expression MULTIPLY expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 28 (expression -> expression MULTIPLY expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 28 (expression -> expression MULTIPLY expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! DIVIDE          [ shift and go to state 42 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! MODULUS         [ shift and go to state 50 ]
   yacc.py:2696:  ! MULTIPLY        [ shift and go to state 51 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 86
   yacc.py:2563:
   yacc.py:2565:    (29) expression -> expression NOT_EQUAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    EQUAL           reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    $end            reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    END             reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    THEN            reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    DO              reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 29 (expression -> expression NOT_EQUAL expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 29 (expression -> expression NOT_EQUAL expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 87
   yacc.py:2563:
   yacc.py:2565:    (30) expression -> expression OR_BITWISE expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_LOGICAL     reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    $end            reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    ELSE            reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    END             reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    THEN            reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    DO              reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    RPAREN          reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    COMMA           reduce using rule 30 (expression -> expression OR_BITWISE expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! AND_BITWISE     [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! EQUAL           [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! NOT_EQUAL       [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! XOR_BITWISE     [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 30 (expression -> expression OR_BITWISE expression .) ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 88
   yacc.py:2563:
   yacc.py:2565:    (31) expression -> expression OR_LOGICAL expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    OR_LOGICAL      reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    $end            reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    ELSE            reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    END             reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    THEN            reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    DO              reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    RPAREN          reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    COMMA           reduce using rule 31 (expression -> expression OR_LOGICAL expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! AND_BITWISE     [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! AND_LOGICAL     [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! EQUAL           [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! NOT_EQUAL       [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! OR_BITWISE      [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! XOR_BITWISE     [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 31 (expression -> expression OR_LOGICAL expression .) ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 89
   yacc.py:2563:
   yacc.py:2565:    (32) expression -> expression PLUS expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    EQUAL           reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    GREATER         reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    LESS            reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    MINUS           reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    PLUS            reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    RANDOM          reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    $end            reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    ELSE            reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    END             reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    THEN            reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    DO              reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    RPAREN          reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    COMMA           reduce using rule 32 (expression -> expression PLUS expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 32 (expression -> expression PLUS expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 32 (expression -> expression PLUS expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 32 (expression -> expression PLUS expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 32 (expression -> expression PLUS expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 32 (expression -> expression PLUS expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 32 (expression -> expression PLUS expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 49 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 55 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 90
   yacc.py:2563:
   yacc.py:2565:    (33) expression -> expression RANDOM expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    EQUAL           reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    GREATER         reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    LESS            reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    RANDOM          reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    $end            reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    ELSE            reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    END             reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    THEN            reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    DO              reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    RPAREN          reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    COMMA           reduce using rule 33 (expression -> expression RANDOM expression .)
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 33 (expression -> expression RANDOM expression .) ]
   yacc.py:2696:  ! AND_BITWISE     [ shift and go to state 40 ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! EQUAL           [ shift and go to state 43 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 45 ]
   yacc.py:2696:  ! GREATER_EQUAL   [ shift and go to state 46 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 47 ]
   yacc.py:2696:  ! LESS_EQUAL      [ shift and go to state 48 ]
   yacc.py:2696:  ! NOT_EQUAL       [ shift and go to state 52 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! RANDOM          [ shift and go to state 56 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 91
   yacc.py:2563:
   yacc.py:2565:    (34) expression -> expression XOR_BITWISE expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    AND_LOGICAL     reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    SEMICOLON       reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    $end            reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    ELSE            reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    END             reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    THEN            reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    DO              reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    RPAREN          reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    COMMA           reduce using rule 34 (expression -> expression XOR_BITWISE expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2696:  ! AND_BITWISE     [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! DIVIDE          [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! EQUAL           [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! EXPONENTIATION  [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! GREATER_EQUAL   [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! LESS_EQUAL      [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! MODULUS         [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! MULTIPLY        [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! NOT_EQUAL       [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! RANDOM          [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! FACTORIAL       [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! SQUARE_ROOT     [ reduce using rule 34 (expression -> expression XOR_BITWISE expression .) ]
   yacc.py:2696:  ! AND_LOGICAL     [ shift and go to state 41 ]
   yacc.py:2696:  ! OR_BITWISE      [ shift and go to state 53 ]
   yacc.py:2696:  ! OR_LOGICAL      [ shift and go to state 54 ]
   yacc.py:2696:  ! XOR_BITWISE     [ shift and go to state 57 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 92
   yacc.py:2563:
   yacc.py:2565:    (41) expression -> LPAREN expression RPAREN .
   yacc.py:2566:
   yacc.py:2687:    AND_BITWISE     reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    AND_LOGICAL     reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    DIVIDE          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    EQUAL           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    EXPONENTIATION  reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    GREATER         reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    GREATER_EQUAL   reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    LESS            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    LESS_EQUAL      reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    MINUS           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    MODULUS         reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    MULTIPLY        reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    NOT_EQUAL       reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    OR_BITWISE      reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    OR_LOGICAL      reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    PLUS            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    RANDOM          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    XOR_BITWISE     reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    FACTORIAL       reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    SQUARE_ROOT     reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    SEMICOLON       reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    $end            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    ELSE            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    END             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    THEN            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    DO              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2687:    COMMA           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 93
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF expression THEN statement_list . else_opt END IF
   yacc.py:2565:    (12) else_opt -> . epsilon
   yacc.py:2565:    (13) else_opt -> . ELSE statement_list
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2566:
   yacc.py:2687:    ELSE            shift and go to state 101
   yacc.py:2687:    END             reduce using rule 56 (epsilon -> .)
   yacc.py:2689:
   yacc.py:2714:    else_opt                       shift and go to state 99
   yacc.py:2714:    epsilon                        shift and go to state 100
   yacc.py:2561:
   yacc.py:2562:state 94
   yacc.py:2563:
   yacc.py:2565:    (14) statement -> READ LPAREN id_list RPAREN .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 14 (statement -> READ LPAREN id_list RPAREN .)
   yacc.py:2687:    $end            reduce using rule 14 (statement -> READ LPAREN id_list RPAREN .)
   yacc.py:2687:    ELSE            reduce using rule 14 (statement -> READ LPAREN id_list RPAREN .)
   yacc.py:2687:    END             reduce using rule 14 (statement -> READ LPAREN id_list RPAREN .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 95
   yacc.py:2563:
   yacc.py:2565:    (51) id_list -> id_list COMMA . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 102
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 96
   yacc.py:2563:
   yacc.py:2565:    (15) statement -> WHILE expression DO statement_list . END WHILE
   yacc.py:2566:
   yacc.py:2687:    END             shift and go to state 103
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 97
   yacc.py:2563:
   yacc.py:2565:    (16) statement -> WRITE LPAREN expression_list RPAREN .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 16 (statement -> WRITE LPAREN expression_list RPAREN .)
   yacc.py:2687:    $end            reduce using rule 16 (statement -> WRITE LPAREN expression_list RPAREN .)
   yacc.py:2687:    ELSE            reduce using rule 16 (statement -> WRITE LPAREN expression_list RPAREN .)
   yacc.py:2687:    END             reduce using rule 16 (statement -> WRITE LPAREN expression_list RPAREN .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 98
   yacc.py:2563:
   yacc.py:2565:    (49) expression_list_B -> expression_list_B COMMA . expression
   yacc.py:2565:    (17) expression -> . expression AND_BITWISE expression
   yacc.py:2565:    (18) expression -> . expression AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> . expression DIVIDE expression
   yacc.py:2565:    (20) expression -> . expression EQUAL expression
   yacc.py:2565:    (21) expression -> . expression EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> . expression GREATER expression
   yacc.py:2565:    (23) expression -> . expression GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> . expression LESS expression
   yacc.py:2565:    (25) expression -> . expression LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> . expression MINUS expression
   yacc.py:2565:    (27) expression -> . expression MODULUS expression
   yacc.py:2565:    (28) expression -> . expression MULTIPLY expression
   yacc.py:2565:    (29) expression -> . expression NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> . expression OR_BITWISE expression
   yacc.py:2565:    (31) expression -> . expression OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> . expression PLUS expression
   yacc.py:2565:    (33) expression -> . expression RANDOM expression
   yacc.py:2565:    (34) expression -> . expression XOR_BITWISE expression
   yacc.py:2565:    (35) expression -> . MINUS expression
   yacc.py:2565:    (36) expression -> . PLUS expression
   yacc.py:2565:    (37) expression -> . NOT_BITWISE expression
   yacc.py:2565:    (38) expression -> . NOT_LOGICAL expression
   yacc.py:2565:    (39) expression -> . expression FACTORIAL
   yacc.py:2565:    (40) expression -> . expression SQUARE_ROOT
   yacc.py:2565:    (41) expression -> . LPAREN expression RPAREN
   yacc.py:2565:    (42) expression -> . INTEGER_LITERAL
   yacc.py:2565:    (43) expression -> . REAL_LITERAL
   yacc.py:2565:    (44) expression -> . STRING_LITERAL
   yacc.py:2565:    (45) expression -> . ID
   yacc.py:2566:
   yacc.py:2687:    MINUS           shift and go to state 21
   yacc.py:2687:    PLUS            shift and go to state 22
   yacc.py:2687:    NOT_BITWISE     shift and go to state 23
   yacc.py:2687:    NOT_LOGICAL     shift and go to state 24
   yacc.py:2687:    LPAREN          shift and go to state 25
   yacc.py:2687:    INTEGER_LITERAL shift and go to state 26
   yacc.py:2687:    REAL_LITERAL    shift and go to state 27
   yacc.py:2687:    STRING_LITERAL  shift and go to state 28
   yacc.py:2687:    ID              shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 104
   yacc.py:2561:
   yacc.py:2562:state 99
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF expression THEN statement_list else_opt . END IF
   yacc.py:2566:
   yacc.py:2687:    END             shift and go to state 105
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 100
   yacc.py:2563:
   yacc.py:2565:    (12) else_opt -> epsilon .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 12 (else_opt -> epsilon .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 101
   yacc.py:2563:
   yacc.py:2565:    (13) else_opt -> ELSE . statement_list
   yacc.py:2565:    (52) statement_list -> . epsilon
   yacc.py:2565:    (53) statement_list -> . statement_list_C
   yacc.py:2565:    (56) epsilon -> .
   yacc.py:2565:    (54) statement_list_C -> . statement
   yacc.py:2565:    (55) statement_list_C -> . statement_list_C SEMICOLON statement
   yacc.py:2565:    (2) statement -> . ID ASSIGN expression
   yacc.py:2565:    (3) statement -> . BREAK
   yacc.py:2565:    (4) statement -> . CONTINUE
   yacc.py:2565:    (5) statement -> . INT ID initializer_opt
   yacc.py:2565:    (6) statement -> . REAL ID initializer_opt
   yacc.py:2565:    (9) statement -> . EXIT
   yacc.py:2565:    (10) statement -> . EXIT expression
   yacc.py:2565:    (11) statement -> . IF expression THEN statement_list else_opt END IF
   yacc.py:2565:    (14) statement -> . READ LPAREN id_list RPAREN
   yacc.py:2565:    (15) statement -> . WHILE expression DO statement_list END WHILE
   yacc.py:2565:    (16) statement -> . WRITE LPAREN expression_list RPAREN
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 56 (epsilon -> .)
   yacc.py:2687:    ID              shift and go to state 6
   yacc.py:2687:    BREAK           shift and go to state 7
   yacc.py:2687:    CONTINUE        shift and go to state 8
   yacc.py:2687:    INT             shift and go to state 9
   yacc.py:2687:    REAL            shift and go to state 10
   yacc.py:2687:    EXIT            shift and go to state 11
   yacc.py:2687:    IF              shift and go to state 12
   yacc.py:2687:    READ            shift and go to state 13
   yacc.py:2687:    WHILE           shift and go to state 14
   yacc.py:2687:    WRITE           shift and go to state 15
   yacc.py:2689:
   yacc.py:2714:    statement_list                 shift and go to state 106
   yacc.py:2714:    epsilon                        shift and go to state 3
   yacc.py:2714:    statement_list_C               shift and go to state 4
   yacc.py:2714:    statement                      shift and go to state 5
   yacc.py:2561:
   yacc.py:2562:state 102
   yacc.py:2563:
   yacc.py:2565:    (51) id_list -> id_list COMMA ID .
   yacc.py:2566:
   yacc.py:2687:    RPAREN          reduce using rule 51 (id_list -> id_list COMMA ID .)
   yacc.py:2687:    COMMA           reduce using rule 51 (id_list -> id_list COMMA ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 103
   yacc.py:2563:
   yacc.py:2565:    (15) statement -> WHILE expression DO statement_list END . WHILE
   yacc.py:2566:
   yacc.py:2687:    WHILE           shift and go to state 107
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 104
   yacc.py:2563:
   yacc.py:2565:    (49) expression_list_B -> expression_list_B COMMA expression .
   yacc.py:2565:    (17) expression -> expression . AND_BITWISE expression
   yacc.py:2565:    (18) expression -> expression . AND_LOGICAL expression
   yacc.py:2565:    (19) expression -> expression . DIVIDE expression
   yacc.py:2565:    (20) expression -> expression . EQUAL expression
   yacc.py:2565:    (21) expression -> expression . EXPONENTIATION expression
   yacc.py:2565:    (22) expression -> expression . GREATER expression
   yacc.py:2565:    (23) expression -> expression . GREATER_EQUAL expression
   yacc.py:2565:    (24) expression -> expression . LESS expression
   yacc.py:2565:    (25) expression -> expression . LESS_EQUAL expression
   yacc.py:2565:    (26) expression -> expression . MINUS expression
   yacc.py:2565:    (27) expression -> expression . MODULUS expression
   yacc.py:2565:    (28) expression -> expression . MULTIPLY expression
   yacc.py:2565:    (29) expression -> expression . NOT_EQUAL expression
   yacc.py:2565:    (30) expression -> expression . OR_BITWISE expression
   yacc.py:2565:    (31) expression -> expression . OR_LOGICAL expression
   yacc.py:2565:    (32) expression -> expression . PLUS expression
   yacc.py:2565:    (33) expression -> expression . RANDOM expression
   yacc.py:2565:    (34) expression -> expression . XOR_BITWISE expression
   yacc.py:2565:    (39) expression -> expression . FACTORIAL
   yacc.py:2565:    (40) expression -> expression . SQUARE_ROOT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 49 (expression_list_B -> expression_list_B COMMA expression .)
   yacc.py:2687:    RPAREN          reduce using rule 49 (expression_list_B -> expression_list_B COMMA expression .)
   yacc.py:2687:    AND_BITWISE     shift and go to state 40
   yacc.py:2687:    AND_LOGICAL     shift and go to state 41
   yacc.py:2687:    DIVIDE          shift and go to state 42
   yacc.py:2687:    EQUAL           shift and go to state 43
   yacc.py:2687:    EXPONENTIATION  shift and go to state 44
   yacc.py:2687:    GREATER         shift and go to state 45
   yacc.py:2687:    GREATER_EQUAL   shift and go to state 46
   yacc.py:2687:    LESS            shift and go to state 47
   yacc.py:2687:    LESS_EQUAL      shift and go to state 48
   yacc.py:2687:    MINUS           shift and go to state 49
   yacc.py:2687:    MODULUS         shift and go to state 50
   yacc.py:2687:    MULTIPLY        shift and go to state 51
   yacc.py:2687:    NOT_EQUAL       shift and go to state 52
   yacc.py:2687:    OR_BITWISE      shift and go to state 53
   yacc.py:2687:    OR_LOGICAL      shift and go to state 54
   yacc.py:2687:    PLUS            shift and go to state 55
   yacc.py:2687:    RANDOM          shift and go to state 56
   yacc.py:2687:    XOR_BITWISE     shift and go to state 57
   yacc.py:2687:    FACTORIAL       shift and go to state 58
   yacc.py:2687:    SQUARE_ROOT     shift and go to state 59
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 105
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF expression THEN statement_list else_opt END . IF
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 108
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 106
   yacc.py:2563:
   yacc.py:2565:    (13) else_opt -> ELSE statement_list .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 13 (else_opt -> ELSE statement_list .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 107
   yacc.py:2563:
   yacc.py:2565:    (15) statement -> WHILE expression DO statement_list END WHILE .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 15 (statement -> WHILE expression DO statement_list END WHILE .)
   yacc.py:2687:    $end            reduce using rule 15 (statement -> WHILE expression DO statement_list END WHILE .)
   yacc.py:2687:    ELSE            reduce using rule 15 (statement -> WHILE expression DO statement_list END WHILE .)
   yacc.py:2687:    END             reduce using rule 15 (statement -> WHILE expression DO statement_list END WHILE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 108
   yacc.py:2563:
   yacc.py:2565:    (11) statement -> IF expression THEN statement_list else_opt END IF .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 11 (statement -> IF expression THEN statement_list else_opt END IF .)
   yacc.py:2687:    $end            reduce using rule 11 (statement -> IF expression THEN statement_list else_opt END IF .)
   yacc.py:2687:    ELSE            reduce using rule 11 (statement -> IF expression THEN statement_list else_opt END IF .)
   yacc.py:2687:    END             reduce using rule 11 (statement -> IF expression THEN statement_list else_opt END IF .)
   yacc.py:2689:
   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : . LexToken(ID,'a',7,155)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : ID . LexToken(ASSIGN,'=',7,157)
   yacc.py: 445:Action : Shift and goto state 17
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : ID ASSIGN . LexToken(ID,'b',7,159)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : ID ASSIGN ID . $end
   yacc.py: 471:Action : Reduce rule [expression -> ID] with ['b'] and goto state 35
   yacc.py: 506:Result : <tuple @ 0x7f9fe5a904b0> (('ID', 'b'))
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : ID ASSIGN expression . $end
   yacc.py: 471:Action : Reduce rule [statement -> ID ASSIGN expression] with ['a','=',('ID', 'b')] and goto state 5
   yacc.py: 506:Result : <tuple @ 0x7f9fe5b99870> (('ASSIGN', 'a', ('ID', 'b')))
   yacc.py: 410:
   yacc.py: 411:State  : 5
   yacc.py: 435:Stack  : statement . $end
   yacc.py: 471:Action : Reduce rule [statement_list_C -> statement] with [<tuple @ 0x7f9fe5b99870>] and goto state 4
   yacc.py: 506:Result : <list @ 0x7f9fe5adddc0> ([('ASSIGN', 'a', ('ID', 'b'))])
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : statement_list_C . $end
   yacc.py: 471:Action : Reduce rule [statement_list -> statement_list_C] with [<list @ 0x7f9fe5adddc0>] and goto state 2
   yacc.py: 506:Result : <list @ 0x7f9fe5adddc0> ([('ASSIGN', 'a', ('ID', 'b'))])
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 430:Defaulted state 2: Reduce using 1
   yacc.py: 435:Stack  : statement_list . $end
   yacc.py: 471:Action : Reduce rule [program -> statement_list] with [<list @ 0x7f9fe5adddc0>] and goto state 1
   yacc.py: 506:Result : <tuple @ 0x7f9fe5a90500> (('BLOCK', [('ASSIGN', 'a', ('ID', 'b'))] ...)
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : program . $end
   yacc.py: 571:Done   : Returning <tuple @ 0x7f9fe5a90500> (('BLOCK', [('ASSIGN', 'a', ('ID', 'b'))] ...)
   yacc.py: 572:PLY: PARSE DEBUG END
